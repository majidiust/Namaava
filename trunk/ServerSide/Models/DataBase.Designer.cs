#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Webinar.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Namaava")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountInfo(AccountInfo instance);
    partial void UpdateAccountInfo(AccountInfo instance);
    partial void DeleteAccountInfo(AccountInfo instance);
    partial void InsertWebinarPeyment(WebinarPeyment instance);
    partial void UpdateWebinarPeyment(WebinarPeyment instance);
    partial void DeleteWebinarPeyment(WebinarPeyment instance);
    partial void InsertApplicationSetting(ApplicationSetting instance);
    partial void UpdateApplicationSetting(ApplicationSetting instance);
    partial void DeleteApplicationSetting(ApplicationSetting instance);
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Path(aspnet_Path instance);
    partial void Updateaspnet_Path(aspnet_Path instance);
    partial void Deleteaspnet_Path(aspnet_Path instance);
    partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Insertaspnet_Profile(aspnet_Profile instance);
    partial void Updateaspnet_Profile(aspnet_Profile instance);
    partial void Deleteaspnet_Profile(aspnet_Profile instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void InsertChat(Chat instance);
    partial void UpdateChat(Chat instance);
    partial void DeleteChat(Chat instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertConfirm(Confirm instance);
    partial void UpdateConfirm(Confirm instance);
    partial void DeleteConfirm(Confirm instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertDegree(Degree instance);
    partial void UpdateDegree(Degree instance);
    partial void DeleteDegree(Degree instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertLogTable(LogTable instance);
    partial void UpdateLogTable(LogTable instance);
    partial void DeleteLogTable(LogTable instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessageReceiver(MessageReceiver instance);
    partial void UpdateMessageReceiver(MessageReceiver instance);
    partial void DeleteMessageReceiver(MessageReceiver instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertNewspaperMember(NewspaperMember instance);
    partial void UpdateNewspaperMember(NewspaperMember instance);
    partial void DeleteNewspaperMember(NewspaperMember instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPeymentPlan(PeymentPlan instance);
    partial void UpdatePeymentPlan(PeymentPlan instance);
    partial void DeletePeymentPlan(PeymentPlan instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertQuestionStatus(QuestionStatus instance);
    partial void UpdateQuestionStatus(QuestionStatus instance);
    partial void DeleteQuestionStatus(QuestionStatus instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSessionAdvertise(SessionAdvertise instance);
    partial void UpdateSessionAdvertise(SessionAdvertise instance);
    partial void DeleteSessionAdvertise(SessionAdvertise instance);
    partial void InsertSessionFile(SessionFile instance);
    partial void UpdateSessionFile(SessionFile instance);
    partial void DeleteSessionFile(SessionFile instance);
    partial void InsertSessionInvite(SessionInvite instance);
    partial void UpdateSessionInvite(SessionInvite instance);
    partial void DeleteSessionInvite(SessionInvite instance);
    partial void InsertSessionRequest(SessionRequest instance);
    partial void UpdateSessionRequest(SessionRequest instance);
    partial void DeleteSessionRequest(SessionRequest instance);
    partial void InsertSessionService(SessionService instance);
    partial void UpdateSessionService(SessionService instance);
    partial void DeleteSessionService(SessionService instance);
    partial void InsertSessionState(SessionState instance);
    partial void UpdateSessionState(SessionState instance);
    partial void DeleteSessionState(SessionState instance);
    partial void InsertSessionStatus(SessionStatus instance);
    partial void UpdateSessionStatus(SessionStatus instance);
    partial void DeleteSessionStatus(SessionStatus instance);
    partial void InsertSessionVideo(SessionVideo instance);
    partial void UpdateSessionVideo(SessionVideo instance);
    partial void DeleteSessionVideo(SessionVideo instance);
    partial void InsertSettingsProperty(SettingsProperty instance);
    partial void UpdateSettingsProperty(SettingsProperty instance);
    partial void DeleteSettingsProperty(SettingsProperty instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskParam(TaskParam instance);
    partial void UpdateTaskParam(TaskParam instance);
    partial void DeleteTaskParam(TaskParam instance);
    partial void InsertTaskStatus(TaskStatus instance);
    partial void UpdateTaskStatus(TaskStatus instance);
    partial void DeleteTaskStatus(TaskStatus instance);
    partial void InsertTaskType(TaskType instance);
    partial void UpdateTaskType(TaskType instance);
    partial void DeleteTaskType(TaskType instance);
    partial void InsertTemp(Temp instance);
    partial void UpdateTemp(Temp instance);
    partial void DeleteTemp(Temp instance);
    partial void InsertTemporalTestsAccount(TemporalTestsAccount instance);
    partial void UpdateTemporalTestsAccount(TemporalTestsAccount instance);
    partial void DeleteTemporalTestsAccount(TemporalTestsAccount instance);
    partial void InsertTestSuiteResult(TestSuiteResult instance);
    partial void UpdateTestSuiteResult(TestSuiteResult instance);
    partial void DeleteTestSuiteResult(TestSuiteResult instance);
    partial void InsertUserInPlan(UserInPlan instance);
    partial void UpdateUserInPlan(UserInPlan instance);
    partial void DeleteUserInPlan(UserInPlan instance);
    partial void InsertUserInService(UserInService instance);
    partial void UpdateUserInService(UserInService instance);
    partial void DeleteUserInService(UserInService instance);
    partial void InsertUserInSession(UserInSession instance);
    partial void UpdateUserInSession(UserInSession instance);
    partial void DeleteUserInSession(UserInSession instance);
    partial void InsertWebinarDateTime(WebinarDateTime instance);
    partial void UpdateWebinarDateTime(WebinarDateTime instance);
    partial void DeleteWebinarDateTime(WebinarDateTime instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NamaavaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountInfo> AccountInfos
		{
			get
			{
				return this.GetTable<AccountInfo>();
			}
		}
		
		public System.Data.Linq.Table<WebinarPeyment> WebinarPeyments
		{
			get
			{
				return this.GetTable<WebinarPeyment>();
			}
		}
		
		public System.Data.Linq.Table<AccountInfo_> AccountInfo_s
		{
			get
			{
				return this.GetTable<AccountInfo_>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationSetting> ApplicationSettings
		{
			get
			{
				return this.GetTable<ApplicationSetting>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationSettings_> ApplicationSettings_s
		{
			get
			{
				return this.GetTable<ApplicationSettings_>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this.GetTable<aspnet_Path>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationAllUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationPerUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
		{
			get
			{
				return this.GetTable<aspnet_Profile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
		{
			get
			{
				return this.GetTable<aspnet_SchemaVersion>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
		{
			get
			{
				return this.GetTable<aspnet_WebEvent_Event>();
			}
		}
		
		public System.Data.Linq.Table<Chat> Chats
		{
			get
			{
				return this.GetTable<Chat>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Confirm> Confirms
		{
			get
			{
				return this.GetTable<Confirm>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Degree> Degrees
		{
			get
			{
				return this.GetTable<Degree>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<LogTable> LogTables
		{
			get
			{
				return this.GetTable<LogTable>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessageReceiver> MessageReceivers
		{
			get
			{
				return this.GetTable<MessageReceiver>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<NewspaperMember> NewspaperMembers
		{
			get
			{
				return this.GetTable<NewspaperMember>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PeymentPlan> PeymentPlans
		{
			get
			{
				return this.GetTable<PeymentPlan>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<QuestionStatus> QuestionStatus
		{
			get
			{
				return this.GetTable<QuestionStatus>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<SessionAdvertise> SessionAdvertises
		{
			get
			{
				return this.GetTable<SessionAdvertise>();
			}
		}
		
		public System.Data.Linq.Table<SessionFile> SessionFiles
		{
			get
			{
				return this.GetTable<SessionFile>();
			}
		}
		
		public System.Data.Linq.Table<SessionInvite> SessionInvites
		{
			get
			{
				return this.GetTable<SessionInvite>();
			}
		}
		
		public System.Data.Linq.Table<SessionRequest> SessionRequests
		{
			get
			{
				return this.GetTable<SessionRequest>();
			}
		}
		
		public System.Data.Linq.Table<SessionService> SessionServices
		{
			get
			{
				return this.GetTable<SessionService>();
			}
		}
		
		public System.Data.Linq.Table<SessionState> SessionStates
		{
			get
			{
				return this.GetTable<SessionState>();
			}
		}
		
		public System.Data.Linq.Table<SessionStatus> SessionStatus
		{
			get
			{
				return this.GetTable<SessionStatus>();
			}
		}
		
		public System.Data.Linq.Table<SessionVideo> SessionVideos
		{
			get
			{
				return this.GetTable<SessionVideo>();
			}
		}
		
		public System.Data.Linq.Table<SettingsProperty> SettingsProperties
		{
			get
			{
				return this.GetTable<SettingsProperty>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskParam> TaskParams
		{
			get
			{
				return this.GetTable<TaskParam>();
			}
		}
		
		public System.Data.Linq.Table<TaskStatus> TaskStatus
		{
			get
			{
				return this.GetTable<TaskStatus>();
			}
		}
		
		public System.Data.Linq.Table<TaskType> TaskTypes
		{
			get
			{
				return this.GetTable<TaskType>();
			}
		}
		
		public System.Data.Linq.Table<Temp> Temps
		{
			get
			{
				return this.GetTable<Temp>();
			}
		}
		
		public System.Data.Linq.Table<TemporalTestsAccount> TemporalTestsAccounts
		{
			get
			{
				return this.GetTable<TemporalTestsAccount>();
			}
		}
		
		public System.Data.Linq.Table<TestSuiteResult> TestSuiteResults
		{
			get
			{
				return this.GetTable<TestSuiteResult>();
			}
		}
		
		public System.Data.Linq.Table<UserInPlan> UserInPlans
		{
			get
			{
				return this.GetTable<UserInPlan>();
			}
		}
		
		public System.Data.Linq.Table<UserInService> UserInServices
		{
			get
			{
				return this.GetTable<UserInService>();
			}
		}
		
		public System.Data.Linq.Table<UserInSession> UserInSessions
		{
			get
			{
				return this.GetTable<UserInSession>();
			}
		}
		
		public System.Data.Linq.Table<WebinarDateTime> WebinarDateTimes
		{
			get
			{
				return this.GetTable<WebinarDateTime>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountInfo")]
	public partial class AccountInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.Guid> _UserId;
		
		private int _AccountId;
		
		private string _BankAccountNum;
		
		private string _BankCardNum;
		
		private string _BankName;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnBankAccountNumChanging(string value);
    partial void OnBankAccountNumChanged();
    partial void OnBankCardNumChanging(string value);
    partial void OnBankCardNumChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    #endregion
		
		public AccountInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountNum", DbType="NVarChar(50)")]
		public string BankAccountNum
		{
			get
			{
				return this._BankAccountNum;
			}
			set
			{
				if ((this._BankAccountNum != value))
				{
					this.OnBankAccountNumChanging(value);
					this.SendPropertyChanging();
					this._BankAccountNum = value;
					this.SendPropertyChanged("BankAccountNum");
					this.OnBankAccountNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCardNum", DbType="NVarChar(50)")]
		public string BankCardNum
		{
			get
			{
				return this._BankCardNum;
			}
			set
			{
				if ((this._BankCardNum != value))
				{
					this.OnBankCardNumChanging(value);
					this.SendPropertyChanging();
					this._BankCardNum = value;
					this.SendPropertyChanged("BankCardNum");
					this.OnBankCardNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(50)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebinarPeyment")]
	public partial class WebinarPeyment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _WebinarID;
		
		private System.Nullable<System.Guid> _UseID;
		
		private string _Fee;
		
		private string _For;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _PostPeymentFee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebinarIDChanging(System.Nullable<int> value);
    partial void OnWebinarIDChanged();
    partial void OnUseIDChanging(System.Nullable<System.Guid> value);
    partial void OnUseIDChanged();
    partial void OnFeeChanging(string value);
    partial void OnFeeChanged();
    partial void OnForChanging(string value);
    partial void OnForChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnPostPeymentFeeChanging(string value);
    partial void OnPostPeymentFeeChanged();
    #endregion
		
		public WebinarPeyment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebinarID", DbType="Int")]
		public System.Nullable<int> WebinarID
		{
			get
			{
				return this._WebinarID;
			}
			set
			{
				if ((this._WebinarID != value))
				{
					this.OnWebinarIDChanging(value);
					this.SendPropertyChanging();
					this._WebinarID = value;
					this.SendPropertyChanged("WebinarID");
					this.OnWebinarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UseID
		{
			get
			{
				return this._UseID;
			}
			set
			{
				if ((this._UseID != value))
				{
					this.OnUseIDChanging(value);
					this.SendPropertyChanging();
					this._UseID = value;
					this.SendPropertyChanged("UseID");
					this.OnUseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="NVarChar(MAX)")]
		public string Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[For]", Storage="_For", DbType="NVarChar(MAX)")]
		public string For
		{
			get
			{
				return this._For;
			}
			set
			{
				if ((this._For != value))
				{
					this.OnForChanging(value);
					this.SendPropertyChanging();
					this._For = value;
					this.SendPropertyChanged("For");
					this.OnForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostPeymentFee", DbType="NVarChar(MAX)")]
		public string PostPeymentFee
		{
			get
			{
				return this._PostPeymentFee;
			}
			set
			{
				if ((this._PostPeymentFee != value))
				{
					this.OnPostPeymentFeeChanging(value);
					this.SendPropertyChanging();
					this._PostPeymentFee = value;
					this.SendPropertyChanged("PostPeymentFee");
					this.OnPostPeymentFeeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountInfo$")]
	public partial class AccountInfo_
	{
		
		private string _UserId;
		
		private System.Nullable<double> _AccountId;
		
		private string _BankAccountNum;
		
		private string _BankCardNum;
		
		private string _BankName;
		
		private string _ExpirationDate;
		
		public AccountInfo_()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(255)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Float")]
		public System.Nullable<double> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountNum", DbType="NVarChar(MAX)")]
		public string BankAccountNum
		{
			get
			{
				return this._BankAccountNum;
			}
			set
			{
				if ((this._BankAccountNum != value))
				{
					this._BankAccountNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCardNum", DbType="NVarChar(MAX)")]
		public string BankCardNum
		{
			get
			{
				return this._BankCardNum;
			}
			set
			{
				if ((this._BankCardNum != value))
				{
					this._BankCardNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(MAX)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this._BankName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="NVarChar(255)")]
		public string ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this._ExpirationDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationSettings")]
	public partial class ApplicationSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SettingName;
		
		private int _SettingsId;
		
		private EntitySet<SettingsProperty> _SettingsProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingsIdChanging(int value);
    partial void OnSettingsIdChanged();
    #endregion
		
		public ApplicationSetting()
		{
			this._SettingsProperties = new EntitySet<SettingsProperty>(new Action<SettingsProperty>(this.attach_SettingsProperties), new Action<SettingsProperty>(this.detach_SettingsProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					this.OnSettingsIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsId = value;
					this.SendPropertyChanged("SettingsId");
					this.OnSettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationSetting_SettingsProperty", Storage="_SettingsProperties", ThisKey="SettingsId", OtherKey="SettingsId")]
		public EntitySet<SettingsProperty> SettingsProperties
		{
			get
			{
				return this._SettingsProperties;
			}
			set
			{
				this._SettingsProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SettingsProperties(SettingsProperty entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationSetting = this;
		}
		
		private void detach_SettingsProperties(SettingsProperty entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationSetting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationSettings$")]
	public partial class ApplicationSettings_
	{
		
		private string _SettingName;
		
		private System.Nullable<double> _SettingsId;
		
		public ApplicationSettings_()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="NVarChar(MAX)")]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this._SettingName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", DbType="Float")]
		public System.Nullable<double> SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					this._SettingsId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships1;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships2;
		
		private EntitySet<aspnet_Path> _aspnet_Paths;
		
		private EntitySet<aspnet_Path> _aspnet_Paths1;
		
		private EntitySet<aspnet_Path> _aspnet_Paths2;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
		private EntitySet<aspnet_Role> _aspnet_Roles1;
		
		private EntitySet<aspnet_Role> _aspnet_Roles2;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Memberships1 = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships1), new Action<aspnet_Membership>(this.detach_aspnet_Memberships1));
			this._aspnet_Memberships2 = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships2), new Action<aspnet_Membership>(this.detach_aspnet_Memberships2));
			this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
			this._aspnet_Paths1 = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths1), new Action<aspnet_Path>(this.detach_aspnet_Paths1));
			this._aspnet_Paths2 = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths2), new Action<aspnet_Path>(this.detach_aspnet_Paths2));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			this._aspnet_Roles1 = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles1), new Action<aspnet_Role>(this.detach_aspnet_Roles1));
			this._aspnet_Roles2 = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles2), new Action<aspnet_Role>(this.detach_aspnet_Roles2));
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership1", Storage="_aspnet_Memberships1", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships1
		{
			get
			{
				return this._aspnet_Memberships1;
			}
			set
			{
				this._aspnet_Memberships1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership2", Storage="_aspnet_Memberships2", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships2
		{
			get
			{
				return this._aspnet_Memberships2;
			}
			set
			{
				this._aspnet_Memberships2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this._aspnet_Paths;
			}
			set
			{
				this._aspnet_Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path1", Storage="_aspnet_Paths1", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths1
		{
			get
			{
				return this._aspnet_Paths1;
			}
			set
			{
				this._aspnet_Paths1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path2", Storage="_aspnet_Paths2", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths2
		{
			get
			{
				return this._aspnet_Paths2;
			}
			set
			{
				this._aspnet_Paths2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role1", Storage="_aspnet_Roles1", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles1
		{
			get
			{
				return this._aspnet_Roles1;
			}
			set
			{
				this._aspnet_Roles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role2", Storage="_aspnet_Roles2", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles2
		{
			get
			{
				return this._aspnet_Roles2;
			}
			set
			{
				this._aspnet_Roles2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Memberships1(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = this;
		}
		
		private void detach_aspnet_Memberships1(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = null;
		}
		
		private void attach_aspnet_Memberships2(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = this;
		}
		
		private void detach_aspnet_Memberships2(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = null;
		}
		
		private void attach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Paths1(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = this;
		}
		
		private void detach_aspnet_Paths1(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = null;
		}
		
		private void attach_aspnet_Paths2(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = this;
		}
		
		private void detach_aspnet_Paths2(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles1(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = this;
		}
		
		private void detach_aspnet_Roles1(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application1 = null;
		}
		
		private void attach_aspnet_Roles2(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = this;
		}
		
		private void detach_aspnet_Roles2(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application2 = null;
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_Application> _aspnet_Application1;
		
		private EntityRef<aspnet_Application> _aspnet_Application2;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_Application1 = default(EntityRef<aspnet_Application>);
			this._aspnet_Application2 = default(EntityRef<aspnet_Application>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (((this._aspnet_Application.HasLoadedOrAssignedValue || this._aspnet_Application1.HasLoadedOrAssignedValue) 
								|| this._aspnet_Application2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if ((this._aspnet_User.HasLoadedOrAssignedValue || this._aspnet_User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership1", Storage="_aspnet_Application1", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application1
		{
			get
			{
				return this._aspnet_Application1.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application1.Entity = null;
						previousValue.aspnet_Memberships1.Remove(this);
					}
					this._aspnet_Application1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships1.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership2", Storage="_aspnet_Application2", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application2
		{
			get
			{
				return this._aspnet_Application2.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application2.Entity = null;
						previousValue.aspnet_Memberships2.Remove(this);
					}
					this._aspnet_Application2.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships2.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership1", Storage="_aspnet_User1", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.aspnet_Membership1 = null;
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership1 = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Paths")]
	public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PathId;
		
		private string _Path;
		
		private string _LoweredPath;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser1;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser2;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers1;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers2;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_Application> _aspnet_Application1;
		
		private EntityRef<aspnet_Application> _aspnet_Application2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
		
		public aspnet_Path()
		{
			this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationAllUser1 = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationAllUser2 = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_PersonalizationPerUsers1 = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers1), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers1));
			this._aspnet_PersonalizationPerUsers2 = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers2), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers2));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_Application1 = default(EntityRef<aspnet_Application>);
			this._aspnet_Application2 = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (((this._aspnet_Application.HasLoadedOrAssignedValue || this._aspnet_Application1.HasLoadedOrAssignedValue) 
								|| this._aspnet_Application2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredPath
		{
			get
			{
				return this._LoweredPath;
			}
			set
			{
				if ((this._LoweredPath != value))
				{
					this.OnLoweredPathChanging(value);
					this.SendPropertyChanging();
					this._LoweredPath = value;
					this.SendPropertyChanged("LoweredPath");
					this.OnLoweredPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
		{
			get
			{
				return this._aspnet_PersonalizationAllUser.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser.Entity = null;
						previousValue.aspnet_Path = null;
					}
					this._aspnet_PersonalizationAllUser.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser1", Storage="_aspnet_PersonalizationAllUser1", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser1
		{
			get
			{
				return this._aspnet_PersonalizationAllUser1.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser1.Entity = null;
						previousValue.aspnet_Path1 = null;
					}
					this._aspnet_PersonalizationAllUser1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path1 = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser2", Storage="_aspnet_PersonalizationAllUser2", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser2
		{
			get
			{
				return this._aspnet_PersonalizationAllUser2.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser2.Entity = null;
						previousValue.aspnet_Path2 = null;
					}
					this._aspnet_PersonalizationAllUser2.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path2 = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser1", Storage="_aspnet_PersonalizationPerUsers1", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers1
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers1;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser2", Storage="_aspnet_PersonalizationPerUsers2", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers2
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers2;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Paths.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path1", Storage="_aspnet_Application1", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application1
		{
			get
			{
				return this._aspnet_Application1.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application1.Entity = null;
						previousValue.aspnet_Paths1.Remove(this);
					}
					this._aspnet_Application1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths1.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path2", Storage="_aspnet_Application2", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application2
		{
			get
			{
				return this._aspnet_Application2.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application2.Entity = null;
						previousValue.aspnet_Paths2.Remove(this);
					}
					this._aspnet_Application2.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths2.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = null;
		}
		
		private void attach_aspnet_PersonalizationPerUsers1(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path1 = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers1(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path1 = null;
		}
		
		private void attach_aspnet_PersonalizationPerUsers2(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path2 = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers2(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationAllUsers")]
	public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PathId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
		private EntityRef<aspnet_Path> _aspnet_Path1;
		
		private EntityRef<aspnet_Path> _aspnet_Path2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationAllUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			this._aspnet_Path1 = default(EntityRef<aspnet_Path>);
			this._aspnet_Path2 = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (((this._aspnet_Path.HasLoadedOrAssignedValue || this._aspnet_Path1.HasLoadedOrAssignedValue) 
								|| this._aspnet_Path2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationAllUser = null;
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser1", Storage="_aspnet_Path1", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path1
		{
			get
			{
				return this._aspnet_Path1.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path1.Entity = null;
						previousValue.aspnet_PersonalizationAllUser1 = null;
					}
					this._aspnet_Path1.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser1 = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser2", Storage="_aspnet_Path2", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path2
		{
			get
			{
				return this._aspnet_Path2.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path2.Entity = null;
						previousValue.aspnet_PersonalizationAllUser2 = null;
					}
					this._aspnet_Path2.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser2 = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationPerUser")]
	public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _PathId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
		private EntityRef<aspnet_Path> _aspnet_Path1;
		
		private EntityRef<aspnet_Path> _aspnet_Path2;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
		private EntityRef<aspnet_User> _aspnet_User2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationPerUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			this._aspnet_Path1 = default(EntityRef<aspnet_Path>);
			this._aspnet_Path2 = default(EntityRef<aspnet_Path>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			this._aspnet_User2 = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (((this._aspnet_Path.HasLoadedOrAssignedValue || this._aspnet_Path1.HasLoadedOrAssignedValue) 
								|| this._aspnet_Path2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (((this._aspnet_User.HasLoadedOrAssignedValue || this._aspnet_User1.HasLoadedOrAssignedValue) 
								|| this._aspnet_User2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser1", Storage="_aspnet_Path1", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path1
		{
			get
			{
				return this._aspnet_Path1.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path1.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers1.Remove(this);
					}
					this._aspnet_Path1.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers1.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser2", Storage="_aspnet_Path2", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path2
		{
			get
			{
				return this._aspnet_Path2.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path2.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers2.Remove(this);
					}
					this._aspnet_Path2.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers2.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser1", Storage="_aspnet_User1", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers1.Remove(this);
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers1.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser2", Storage="_aspnet_User2", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User2
		{
			get
			{
				return this._aspnet_User2.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User2.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers2.Remove(this);
					}
					this._aspnet_User2.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers2.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Profile")]
	public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _PropertyNames;
		
		private string _PropertyValuesString;
		
		private System.Data.Linq.Binary _PropertyValuesBinary;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if ((this._aspnet_User.HasLoadedOrAssignedValue || this._aspnet_User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyNames
		{
			get
			{
				return this._PropertyNames;
			}
			set
			{
				if ((this._PropertyNames != value))
				{
					this.OnPropertyNamesChanging(value);
					this.SendPropertyChanging();
					this._PropertyNames = value;
					this.SendPropertyChanged("PropertyNames");
					this.OnPropertyNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyValuesString
		{
			get
			{
				return this._PropertyValuesString;
			}
			set
			{
				if ((this._PropertyValuesString != value))
				{
					this.OnPropertyValuesStringChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesString = value;
					this.SendPropertyChanged("PropertyValuesString");
					this.OnPropertyValuesStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyValuesBinary
		{
			get
			{
				return this._PropertyValuesBinary;
			}
			set
			{
				if ((this._PropertyValuesBinary != value))
				{
					this.OnPropertyValuesBinaryChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesBinary = value;
					this.SendPropertyChanged("PropertyValuesBinary");
					this.OnPropertyValuesBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile1", Storage="_aspnet_User1", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.aspnet_Profile1 = null;
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile1 = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles1;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_Application> _aspnet_Application1;
		
		private EntityRef<aspnet_Application> _aspnet_Application2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_UsersInRoles1 = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles1), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles1));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_Application1 = default(EntityRef<aspnet_Application>);
			this._aspnet_Application2 = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (((this._aspnet_Application.HasLoadedOrAssignedValue || this._aspnet_Application1.HasLoadedOrAssignedValue) 
								|| this._aspnet_Application2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole1", Storage="_aspnet_UsersInRoles1", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles1
		{
			get
			{
				return this._aspnet_UsersInRoles1;
			}
			set
			{
				this._aspnet_UsersInRoles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role1", Storage="_aspnet_Application1", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application1
		{
			get
			{
				return this._aspnet_Application1.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application1.Entity = null;
						previousValue.aspnet_Roles1.Remove(this);
					}
					this._aspnet_Application1.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles1.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role2", Storage="_aspnet_Application2", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application2
		{
			get
			{
				return this._aspnet_Application2.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application2.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application2.Entity = null;
						previousValue.aspnet_Roles2.Remove(this);
					}
					this._aspnet_Application2.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles2.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_aspnet_UsersInRoles1(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role1 = this;
		}
		
		private void detach_aspnet_UsersInRoles1(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_SchemaVersions")]
	public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Feature;
		
		private string _CompatibleSchemaVersion;
		
		private bool _IsCurrentVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public aspnet_SchemaVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompatibleSchemaVersion
		{
			get
			{
				return this._CompatibleSchemaVersion;
			}
			set
			{
				if ((this._CompatibleSchemaVersion != value))
				{
					this.OnCompatibleSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._CompatibleSchemaVersion = value;
					this.SendPropertyChanged("CompatibleSchemaVersion");
					this.OnCompatibleSchemaVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership1;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers1;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers2;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile1;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles1;
		
		private EntitySet<Chat> _Chats;
		
		private EntitySet<Chat> _Chats1;
		
		private EntitySet<Confirm> _Confirms;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<MessageReceiver> _MessageReceivers;
		
		private EntityRef<Profile> _Profile;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Session> _Sessions1;
		
		private EntitySet<SessionInvite> _SessionInvites;
		
		private EntitySet<SessionRequest> _SessionRequests;
		
		private EntitySet<UserInPlan> _UserInPlans;
		
		private EntitySet<UserInService> _UserInServices;
		
		private EntitySet<UserInSession> _UserInSessions;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_Membership1 = default(EntityRef<aspnet_Membership>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_PersonalizationPerUsers1 = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers1), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers1));
			this._aspnet_PersonalizationPerUsers2 = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers2), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers2));
			this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
			this._aspnet_Profile1 = default(EntityRef<aspnet_Profile>);
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_UsersInRoles1 = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles1), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles1));
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			this._Chats1 = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats1), new Action<Chat>(this.detach_Chats1));
			this._Confirms = new EntitySet<Confirm>(new Action<Confirm>(this.attach_Confirms), new Action<Confirm>(this.detach_Confirms));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessageReceivers = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceivers), new Action<MessageReceiver>(this.detach_MessageReceivers));
			this._Profile = default(EntityRef<Profile>);
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Sessions1 = new EntitySet<Session>(new Action<Session>(this.attach_Sessions1), new Action<Session>(this.detach_Sessions1));
			this._SessionInvites = new EntitySet<SessionInvite>(new Action<SessionInvite>(this.attach_SessionInvites), new Action<SessionInvite>(this.detach_SessionInvites));
			this._SessionRequests = new EntitySet<SessionRequest>(new Action<SessionRequest>(this.attach_SessionRequests), new Action<SessionRequest>(this.detach_SessionRequests));
			this._UserInPlans = new EntitySet<UserInPlan>(new Action<UserInPlan>(this.attach_UserInPlans), new Action<UserInPlan>(this.detach_UserInPlans));
			this._UserInServices = new EntitySet<UserInService>(new Action<UserInService>(this.attach_UserInServices), new Action<UserInService>(this.detach_UserInServices));
			this._UserInSessions = new EntitySet<UserInSession>(new Action<UserInSession>(this.attach_UserInSessions), new Action<UserInSession>(this.detach_UserInSessions));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership1", Storage="_aspnet_Membership1", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership1
		{
			get
			{
				return this._aspnet_Membership1.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership1.Entity = null;
						previousValue.aspnet_User1 = null;
					}
					this._aspnet_Membership1.Entity = value;
					if ((value != null))
					{
						value.aspnet_User1 = this;
					}
					this.SendPropertyChanged("aspnet_Membership1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser1", Storage="_aspnet_PersonalizationPerUsers1", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers1
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers1;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser2", Storage="_aspnet_PersonalizationPerUsers2", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers2
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers2;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile
		{
			get
			{
				return this._aspnet_Profile.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile1", Storage="_aspnet_Profile1", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile1
		{
			get
			{
				return this._aspnet_Profile1.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile1.Entity = null;
						previousValue.aspnet_User1 = null;
					}
					this._aspnet_Profile1.Entity = value;
					if ((value != null))
					{
						value.aspnet_User1 = this;
					}
					this.SendPropertyChanged("aspnet_Profile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole1", Storage="_aspnet_UsersInRoles1", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles1
		{
			get
			{
				return this._aspnet_UsersInRoles1;
			}
			set
			{
				this._aspnet_UsersInRoles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chat", Storage="_Chats", ThisKey="UserId", OtherKey="SenderId")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chat1", Storage="_Chats1", ThisKey="UserId", OtherKey="RecieverId")]
		public EntitySet<Chat> Chats1
		{
			get
			{
				return this._Chats1;
			}
			set
			{
				this._Chats1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Confirm", Storage="_Confirms", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Confirm> Confirms
		{
			get
			{
				return this._Confirms;
			}
			set
			{
				this._Confirms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_Messages", ThisKey="UserId", OtherKey="Sender")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_MessageReceiver", Storage="_MessageReceivers", ThisKey="UserId", OtherKey="Receiver")]
		public EntitySet<MessageReceiver> MessageReceivers
		{
			get
			{
				return this._MessageReceivers;
			}
			set
			{
				this._MessageReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Profile", Storage="_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Session", Storage="_Sessions", ThisKey="UserId", OtherKey="PresentorId")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Session1", Storage="_Sessions1", ThisKey="UserId", OtherKey="SessionAdmin")]
		public EntitySet<Session> Sessions1
		{
			get
			{
				return this._Sessions1;
			}
			set
			{
				this._Sessions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SessionInvite", Storage="_SessionInvites", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SessionInvite> SessionInvites
		{
			get
			{
				return this._SessionInvites;
			}
			set
			{
				this._SessionInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SessionRequest", Storage="_SessionRequests", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SessionRequest> SessionRequests
		{
			get
			{
				return this._SessionRequests;
			}
			set
			{
				this._SessionRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInPlan", Storage="_UserInPlans", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserInPlan> UserInPlans
		{
			get
			{
				return this._UserInPlans;
			}
			set
			{
				this._UserInPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInService", Storage="_UserInServices", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserInService> UserInServices
		{
			get
			{
				return this._UserInServices;
			}
			set
			{
				this._UserInServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInSession", Storage="_UserInSessions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserInSession> UserInSessions
		{
			get
			{
				return this._UserInSessions;
			}
			set
			{
				this._UserInSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_PersonalizationPerUsers1(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers1(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = null;
		}
		
		private void attach_aspnet_PersonalizationPerUsers2(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User2 = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers2(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User2 = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles1(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = this;
		}
		
		private void detach_aspnet_UsersInRoles1(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = null;
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = this;
		}
		
		private void detach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = null;
		}
		
		private void attach_Confirms(Confirm entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Confirms(Confirm entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_MessageReceivers(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_MessageReceivers(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = this;
		}
		
		private void detach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User1 = null;
		}
		
		private void attach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserInPlans(UserInPlan entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserInPlans(UserInPlan entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserInServices(UserInService entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserInServices(UserInService entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserInSessions(UserInSession entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserInSessions(UserInSession entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_Role> _aspnet_Role1;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_Role1 = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if ((this._aspnet_User.HasLoadedOrAssignedValue || this._aspnet_User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if ((this._aspnet_Role.HasLoadedOrAssignedValue || this._aspnet_Role1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole1", Storage="_aspnet_Role1", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role1
		{
			get
			{
				return this._aspnet_Role1.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role1.Entity = null;
						previousValue.aspnet_UsersInRoles1.Remove(this);
					}
					this._aspnet_Role1.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles1.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole1", Storage="_aspnet_User1", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.aspnet_UsersInRoles1.Remove(this);
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles1.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_WebEvent_Events")]
	public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private System.DateTime _EventTimeUtc;
		
		private System.DateTime _EventTime;
		
		private string _EventType;
		
		private decimal _EventSequence;
		
		private decimal _EventOccurrence;
		
		private int _EventCode;
		
		private int _EventDetailCode;
		
		private string _Message;
		
		private string _ApplicationPath;
		
		private string _ApplicationVirtualPath;
		
		private string _MachineName;
		
		private string _RequestUrl;
		
		private string _ExceptionType;
		
		private string _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public aspnet_WebEvent_Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimeUtc
		{
			get
			{
				return this._EventTimeUtc;
			}
			set
			{
				if ((this._EventTimeUtc != value))
				{
					this.OnEventTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventTimeUtc = value;
					this.SendPropertyChanged("EventTimeUtc");
					this.OnEventTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventSequence
		{
			get
			{
				return this._EventSequence;
			}
			set
			{
				if ((this._EventSequence != value))
				{
					this.OnEventSequenceChanging(value);
					this.SendPropertyChanging();
					this._EventSequence = value;
					this.SendPropertyChanged("EventSequence");
					this.OnEventSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventOccurrence
		{
			get
			{
				return this._EventOccurrence;
			}
			set
			{
				if ((this._EventOccurrence != value))
				{
					this.OnEventOccurrenceChanging(value);
					this.SendPropertyChanging();
					this._EventOccurrence = value;
					this.SendPropertyChanged("EventOccurrence");
					this.OnEventOccurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="Int NOT NULL")]
		public int EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailCode", DbType="Int NOT NULL")]
		public int EventDetailCode
		{
			get
			{
				return this._EventDetailCode;
			}
			set
			{
				if ((this._EventDetailCode != value))
				{
					this.OnEventDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._EventDetailCode = value;
					this.SendPropertyChanged("EventDetailCode");
					this.OnEventDetailCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationPath", DbType="NVarChar(256)")]
		public string ApplicationPath
		{
			get
			{
				return this._ApplicationPath;
			}
			set
			{
				if ((this._ApplicationPath != value))
				{
					this.OnApplicationPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPath = value;
					this.SendPropertyChanged("ApplicationPath");
					this.OnApplicationPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
		public string ApplicationVirtualPath
		{
			get
			{
				return this._ApplicationVirtualPath;
			}
			set
			{
				if ((this._ApplicationVirtualPath != value))
				{
					this.OnApplicationVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationVirtualPath = value;
					this.SendPropertyChanged("ApplicationVirtualPath");
					this.OnApplicationVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestUrl", DbType="NVarChar(1024)")]
		public string RequestUrl
		{
			get
			{
				return this._RequestUrl;
			}
			set
			{
				if ((this._RequestUrl != value))
				{
					this.OnRequestUrlChanging(value);
					this.SendPropertyChanging();
					this._RequestUrl = value;
					this.SendPropertyChanged("RequestUrl");
					this.OnRequestUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="NVarChar(256)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chat")]
	public partial class Chat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChatId;
		
		private System.Nullable<System.Guid> _SenderId;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<System.Guid> _RecieverId;
		
		private System.Nullable<int> _SessionId;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _MediaType;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<int> _QuestionStatus;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
		private EntityRef<MediaType> _MediaType1;
		
		private EntityRef<QuestionStatus> _QuestionStatus1;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChatIdChanging(int value);
    partial void OnChatIdChanged();
    partial void OnSenderIdChanging(System.Nullable<System.Guid> value);
    partial void OnSenderIdChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnRecieverIdChanging(System.Nullable<System.Guid> value);
    partial void OnRecieverIdChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnMediaTypeChanging(System.Nullable<int> value);
    partial void OnMediaTypeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnQuestionStatusChanging(System.Nullable<int> value);
    partial void OnQuestionStatusChanged();
    #endregion
		
		public Chat()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			this._MediaType1 = default(EntityRef<MediaType>);
			this._QuestionStatus1 = default(EntityRef<QuestionStatus>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChatId
		{
			get
			{
				return this._ChatId;
			}
			set
			{
				if ((this._ChatId != value))
				{
					this.OnChatIdChanging(value);
					this.SendPropertyChanging();
					this._ChatId = value;
					this.SendPropertyChanged("ChatId");
					this.OnChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SenderId
		{
			get
			{
				return this._SenderId;
			}
			set
			{
				if ((this._SenderId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIdChanging(value);
					this.SendPropertyChanging();
					this._SenderId = value;
					this.SendPropertyChanged("SenderId");
					this.OnSenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecieverId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RecieverId
		{
			get
			{
				return this._RecieverId;
			}
			set
			{
				if ((this._RecieverId != value))
				{
					if (this._aspnet_User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecieverIdChanging(value);
					this.SendPropertyChanging();
					this._RecieverId = value;
					this.SendPropertyChanged("RecieverId");
					this.OnRecieverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaType", DbType="Int")]
		public System.Nullable<int> MediaType
		{
			get
			{
				return this._MediaType;
			}
			set
			{
				if ((this._MediaType != value))
				{
					if (this._MediaType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaTypeChanging(value);
					this.SendPropertyChanging();
					this._MediaType = value;
					this.SendPropertyChanged("MediaType");
					this.OnMediaTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionStatus", DbType="Int")]
		public System.Nullable<int> QuestionStatus
		{
			get
			{
				return this._QuestionStatus;
			}
			set
			{
				if ((this._QuestionStatus != value))
				{
					if (this._QuestionStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionStatusChanging(value);
					this.SendPropertyChanging();
					this._QuestionStatus = value;
					this.SendPropertyChanged("QuestionStatus");
					this.OnQuestionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chat", Storage="_aspnet_User", ThisKey="SenderId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._SenderId = value.UserId;
					}
					else
					{
						this._SenderId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Chat1", Storage="_aspnet_User1", ThisKey="RecieverId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.Chats1.Remove(this);
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.Chats1.Add(this);
						this._RecieverId = value.UserId;
					}
					else
					{
						this._RecieverId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaType_Chat", Storage="_MediaType1", ThisKey="MediaType", OtherKey="MediaTypeId", IsForeignKey=true)]
		public MediaType MediaType1
		{
			get
			{
				return this._MediaType1.Entity;
			}
			set
			{
				MediaType previousValue = this._MediaType1.Entity;
				if (((previousValue != value) 
							|| (this._MediaType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaType1.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._MediaType1.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._MediaType = value.MediaTypeId;
					}
					else
					{
						this._MediaType = default(Nullable<int>);
					}
					this.SendPropertyChanged("MediaType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionStatus_Chat", Storage="_QuestionStatus1", ThisKey="QuestionStatus", OtherKey="Id", IsForeignKey=true)]
		public QuestionStatus QuestionStatus1
		{
			get
			{
				return this._QuestionStatus1.Entity;
			}
			set
			{
				QuestionStatus previousValue = this._QuestionStatus1.Entity;
				if (((previousValue != value) 
							|| (this._QuestionStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionStatus1.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._QuestionStatus1.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._QuestionStatus = value.Id;
					}
					else
					{
						this._QuestionStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Chat", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityId;
		
		private string _Name;
		
		private System.Nullable<int> _Prefix;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrefixChanging(System.Nullable<int> value);
    partial void OnPrefixChanged();
    #endregion
		
		public City()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="Int")]
		public System.Nullable<int> Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Profile", Storage="_Profiles", ThisKey="CityId", OtherKey="CityId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Confirm]")]
	public partial class Confirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.Guid> _Guid;
		
		private int _GuidId;
		
		private System.Nullable<bool> _IsUsed;
		
		private System.Nullable<bool> _isConfirm;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnGuidChanging(System.Nullable<System.Guid> value);
    partial void OnGuidChanged();
    partial void OnGuidIdChanging(int value);
    partial void OnGuidIdChanged();
    partial void OnIsUsedChanging(System.Nullable<bool> value);
    partial void OnIsUsedChanged();
    partial void OnisConfirmChanging(System.Nullable<bool> value);
    partial void OnisConfirmChanged();
    #endregion
		
		public Confirm()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GuidId
		{
			get
			{
				return this._GuidId;
			}
			set
			{
				if ((this._GuidId != value))
				{
					this.OnGuidIdChanging(value);
					this.SendPropertyChanging();
					this._GuidId = value;
					this.SendPropertyChanged("GuidId");
					this.OnGuidIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUsed", DbType="Bit")]
		public System.Nullable<bool> IsUsed
		{
			get
			{
				return this._IsUsed;
			}
			set
			{
				if ((this._IsUsed != value))
				{
					this.OnIsUsedChanging(value);
					this.SendPropertyChanging();
					this._IsUsed = value;
					this.SendPropertyChanged("IsUsed");
					this.OnIsUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConfirm", DbType="Bit")]
		public System.Nullable<bool> isConfirm
		{
			get
			{
				return this._isConfirm;
			}
			set
			{
				if ((this._isConfirm != value))
				{
					this.OnisConfirmChanging(value);
					this.SendPropertyChanging();
					this._isConfirm = value;
					this.SendPropertyChanged("isConfirm");
					this.OnisConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Confirm", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Confirms.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Confirms.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Name;
		
		private System.Nullable<int> _Prefix;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrefixChanging(System.Nullable<int> value);
    partial void OnPrefixChanged();
    #endregion
		
		public Country()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="Int")]
		public System.Nullable<int> Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Profile", Storage="_Profiles", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Degree")]
	public partial class Degree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DegreeId;
		
		private string _DegreeValue;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDegreeIdChanging(int value);
    partial void OnDegreeIdChanged();
    partial void OnDegreeValueChanging(string value);
    partial void OnDegreeValueChanged();
    #endregion
		
		public Degree()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DegreeId
		{
			get
			{
				return this._DegreeId;
			}
			set
			{
				if ((this._DegreeId != value))
				{
					this.OnDegreeIdChanging(value);
					this.SendPropertyChanging();
					this._DegreeId = value;
					this.SendPropertyChanged("DegreeId");
					this.OnDegreeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeValue", DbType="NVarChar(50)")]
		public string DegreeValue
		{
			get
			{
				return this._DegreeValue;
			}
			set
			{
				if ((this._DegreeValue != value))
				{
					this.OnDegreeValueChanging(value);
					this.SendPropertyChanging();
					this._DegreeValue = value;
					this.SendPropertyChanged("DegreeValue");
					this.OnDegreeValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Degree_Profile", Storage="_Profiles", ThisKey="DegreeId", OtherKey="DegreeId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Degree = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Degree = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discount")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiscountID;
		
		private int _DiscountValue;
		
		private bool _DiscountIsUsed;
		
		private System.Nullable<System.DateTime> _DiscountUsedDate;
		
		private System.Nullable<System.Guid> _DiscountUserID;
		
		private System.Nullable<int> _DiscountPaymentID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscountIDChanging(int value);
    partial void OnDiscountIDChanged();
    partial void OnDiscountValueChanging(int value);
    partial void OnDiscountValueChanged();
    partial void OnDiscountIsUsedChanging(bool value);
    partial void OnDiscountIsUsedChanged();
    partial void OnDiscountUsedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDiscountUsedDateChanged();
    partial void OnDiscountUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnDiscountUserIDChanged();
    partial void OnDiscountPaymentIDChanging(System.Nullable<int> value);
    partial void OnDiscountPaymentIDChanged();
    #endregion
		
		public Discount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiscountID
		{
			get
			{
				return this._DiscountID;
			}
			set
			{
				if ((this._DiscountID != value))
				{
					this.OnDiscountIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountID = value;
					this.SendPropertyChanged("DiscountID");
					this.OnDiscountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountValue", DbType="Int NOT NULL")]
		public int DiscountValue
		{
			get
			{
				return this._DiscountValue;
			}
			set
			{
				if ((this._DiscountValue != value))
				{
					this.OnDiscountValueChanging(value);
					this.SendPropertyChanging();
					this._DiscountValue = value;
					this.SendPropertyChanged("DiscountValue");
					this.OnDiscountValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountIsUsed", DbType="Bit NOT NULL")]
		public bool DiscountIsUsed
		{
			get
			{
				return this._DiscountIsUsed;
			}
			set
			{
				if ((this._DiscountIsUsed != value))
				{
					this.OnDiscountIsUsedChanging(value);
					this.SendPropertyChanging();
					this._DiscountIsUsed = value;
					this.SendPropertyChanged("DiscountIsUsed");
					this.OnDiscountIsUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountUsedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DiscountUsedDate
		{
			get
			{
				return this._DiscountUsedDate;
			}
			set
			{
				if ((this._DiscountUsedDate != value))
				{
					this.OnDiscountUsedDateChanging(value);
					this.SendPropertyChanging();
					this._DiscountUsedDate = value;
					this.SendPropertyChanged("DiscountUsedDate");
					this.OnDiscountUsedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DiscountUserID
		{
			get
			{
				return this._DiscountUserID;
			}
			set
			{
				if ((this._DiscountUserID != value))
				{
					this.OnDiscountUserIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountUserID = value;
					this.SendPropertyChanged("DiscountUserID");
					this.OnDiscountUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPaymentID", DbType="Int")]
		public System.Nullable<int> DiscountPaymentID
		{
			get
			{
				return this._DiscountPaymentID;
			}
			set
			{
				if ((this._DiscountPaymentID != value))
				{
					this.OnDiscountPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._DiscountPaymentID = value;
					this.SendPropertyChanged("DiscountPaymentID");
					this.OnDiscountPaymentIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogTable")]
	public partial class LogTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private string _Message;
		
		private System.DateTime _Time;
		
		private System.Nullable<int> _LineOfCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnLineOfCodeChanging(System.Nullable<int> value);
    partial void OnLineOfCodeChanged();
    #endregion
		
		public LogTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineOfCode", DbType="Int")]
		public System.Nullable<int> LineOfCode
		{
			get
			{
				return this._LineOfCode;
			}
			set
			{
				if ((this._LineOfCode != value))
				{
					this.OnLineOfCodeChanging(value);
					this.SendPropertyChanging();
					this._LineOfCode = value;
					this.SendPropertyChanged("LineOfCode");
					this.OnLineOfCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaType")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaTypeId;
		
		private string _Media;
		
		private EntitySet<Chat> _Chats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeIdChanging(int value);
    partial void OnMediaTypeIdChanged();
    partial void OnMediaChanging(string value);
    partial void OnMediaChanged();
    #endregion
		
		public MediaType()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MediaTypeId
		{
			get
			{
				return this._MediaTypeId;
			}
			set
			{
				if ((this._MediaTypeId != value))
				{
					this.OnMediaTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeId = value;
					this.SendPropertyChanged("MediaTypeId");
					this.OnMediaTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Media", DbType="NVarChar(50)")]
		public string Media
		{
			get
			{
				return this._Media;
			}
			set
			{
				if ((this._Media != value))
				{
					this.OnMediaChanging(value);
					this.SendPropertyChanging();
					this._Media = value;
					this.SendPropertyChanged("Media");
					this.OnMediaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaType_Chat", Storage="_Chats", ThisKey="MediaTypeId", OtherKey="MediaType")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.MediaType1 = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.MediaType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Message1;
		
		private int _MessageType;
		
		private int _MessageId;
		
		private System.Nullable<System.Guid> _Sender;
		
		private string _Subject;
		
		private System.Nullable<int> _Date;
		
		private EntitySet<MessageReceiver> _MessageReceivers;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessage1Changing(string value);
    partial void OnMessage1Changed();
    partial void OnMessageTypeChanging(int value);
    partial void OnMessageTypeChanged();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnSenderChanging(System.Nullable<System.Guid> value);
    partial void OnSenderChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDateChanging(System.Nullable<int> value);
    partial void OnDateChanged();
    #endregion
		
		public Message()
		{
			this._MessageReceivers = new EntitySet<MessageReceiver>(new Action<MessageReceiver>(this.attach_MessageReceivers), new Action<MessageReceiver>(this.detach_MessageReceivers));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Message", Storage="_Message1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Message1
		{
			get
			{
				return this._Message1;
			}
			set
			{
				if ((this._Message1 != value))
				{
					this.OnMessage1Changing(value);
					this.SendPropertyChanging();
					this._Message1 = value;
					this.SendPropertyChanged("Message1");
					this.OnMessage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageType", DbType="Int NOT NULL")]
		public int MessageType
		{
			get
			{
				return this._MessageType;
			}
			set
			{
				if ((this._MessageType != value))
				{
					this.OnMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._MessageType = value;
					this.SendPropertyChanged("MessageType");
					this.OnMessageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Int")]
		public System.Nullable<int> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageReceiver", Storage="_MessageReceivers", ThisKey="MessageId", OtherKey="MessageId")]
		public EntitySet<MessageReceiver> MessageReceivers
		{
			get
			{
				return this._MessageReceivers;
			}
			set
			{
				this._MessageReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Message", Storage="_aspnet_User", ThisKey="Sender", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._Sender = value.UserId;
					}
					else
					{
						this._Sender = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Message", Storage="_WebinarDateTime", ThisKey="Date", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._Date = value.id;
					}
					else
					{
						this._Date = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageReceivers(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessageReceivers(MessageReceiver entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageReceiver")]
	public partial class MessageReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageReceiverId;
		
		private System.Nullable<int> _MessageId;
		
		private System.Nullable<System.Guid> _Receiver;
		
		private System.Nullable<bool> _IsRead;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Message> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageReceiverIdChanging(int value);
    partial void OnMessageReceiverIdChanged();
    partial void OnMessageIdChanging(System.Nullable<int> value);
    partial void OnMessageIdChanged();
    partial void OnReceiverChanging(System.Nullable<System.Guid> value);
    partial void OnReceiverChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    #endregion
		
		public MessageReceiver()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Message = default(EntityRef<Message>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageReceiverId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageReceiverId
		{
			get
			{
				return this._MessageReceiverId;
			}
			set
			{
				if ((this._MessageReceiverId != value))
				{
					this.OnMessageReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._MessageReceiverId = value;
					this.SendPropertyChanged("MessageReceiverId");
					this.OnMessageReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", DbType="Int")]
		public System.Nullable<int> MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receiver", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
		public System.Nullable<bool> IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_MessageReceiver", Storage="_aspnet_User", ThisKey="Receiver", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.MessageReceivers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.MessageReceivers.Add(this);
						this._Receiver = value.UserId;
					}
					else
					{
						this._Receiver = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageReceiver", Storage="_Message", ThisKey="MessageId", OtherKey="MessageId", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageReceivers.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageReceivers.Add(this);
						this._MessageId = value.MessageId;
					}
					else
					{
						this._MessageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Subject;
		
		private string _Describtion;
		
		private string _PictureID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDescribtionChanging(string value);
    partial void OnDescribtionChanged();
    partial void OnPictureIDChanging(string value);
    partial void OnPictureIDChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describtion", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Describtion
		{
			get
			{
				return this._Describtion;
			}
			set
			{
				if ((this._Describtion != value))
				{
					this.OnDescribtionChanging(value);
					this.SendPropertyChanging();
					this._Describtion = value;
					this.SendPropertyChanged("Describtion");
					this.OnDescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureID", DbType="NVarChar(MAX)")]
		public string PictureID
		{
			get
			{
				return this._PictureID;
			}
			set
			{
				if ((this._PictureID != value))
				{
					this.OnPictureIDChanging(value);
					this.SendPropertyChanging();
					this._PictureID = value;
					this.SendPropertyChanged("PictureID");
					this.OnPictureIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewspaperMembers")]
	public partial class NewspaperMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EmailAddress;
		
		private System.DateTime _SubmitDate;
		
		private bool _Enabled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public NewspaperMember()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PageName;
		
		private string _PageContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnPageContentChanging(string value);
    partial void OnPageContentChanged();
    #endregion
		
		public Page()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(50)")]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageContent", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string PageContent
		{
			get
			{
				return this._PageContent;
			}
			set
			{
				if ((this._PageContent != value))
				{
					this.OnPageContentChanging(value);
					this.SendPropertyChanging();
					this._PageContent = value;
					this.SendPropertyChanged("PageContent");
					this.OnPageContentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PeymentPlan")]
	public partial class PeymentPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PrePeyment;
		
		private string _PostPayment;
		
		private string _Desc;
		
		private System.Nullable<int> _NOU;
		
		private EntitySet<UserInPlan> _UserInPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPrePeymentChanging(string value);
    partial void OnPrePeymentChanged();
    partial void OnPostPaymentChanging(string value);
    partial void OnPostPaymentChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnNOUChanging(System.Nullable<int> value);
    partial void OnNOUChanged();
    #endregion
		
		public PeymentPlan()
		{
			this._UserInPlans = new EntitySet<UserInPlan>(new Action<UserInPlan>(this.attach_UserInPlans), new Action<UserInPlan>(this.detach_UserInPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrePeyment", DbType="NVarChar(50)")]
		public string PrePeyment
		{
			get
			{
				return this._PrePeyment;
			}
			set
			{
				if ((this._PrePeyment != value))
				{
					this.OnPrePeymentChanging(value);
					this.SendPropertyChanging();
					this._PrePeyment = value;
					this.SendPropertyChanged("PrePeyment");
					this.OnPrePeymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostPayment", DbType="NVarChar(50)")]
		public string PostPayment
		{
			get
			{
				return this._PostPayment;
			}
			set
			{
				if ((this._PostPayment != value))
				{
					this.OnPostPaymentChanging(value);
					this.SendPropertyChanging();
					this._PostPayment = value;
					this.SendPropertyChanged("PostPayment");
					this.OnPostPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="NVarChar(MAX)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOU", DbType="Int")]
		public System.Nullable<int> NOU
		{
			get
			{
				return this._NOU;
			}
			set
			{
				if ((this._NOU != value))
				{
					this.OnNOUChanging(value);
					this.SendPropertyChanging();
					this._NOU = value;
					this.SendPropertyChanged("NOU");
					this.OnNOUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeymentPlan_UserInPlan", Storage="_UserInPlans", ThisKey="ID", OtherKey="PlanID")]
		public EntitySet<UserInPlan> UserInPlans
		{
			get
			{
				return this._UserInPlans;
			}
			set
			{
				this._UserInPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInPlans(UserInPlan entity)
		{
			this.SendPropertyChanging();
			entity.PeymentPlan = this;
		}
		
		private void detach_UserInPlans(UserInPlan entity)
		{
			this.SendPropertyChanging();
			entity.PeymentPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NationalId;
		
		private string _Photo;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _Balance;
		
		private System.Nullable<int> _CountyId;
		
		private System.Nullable<int> _Birthday;
		
		private System.Nullable<int> _CountryId;
		
		private System.Guid _UserId;
		
		private System.Nullable<bool> _Gender;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _DegreeId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Degree> _Degree;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNationalIdChanging(string value);
    partial void OnNationalIdChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnBalanceChanging(System.Nullable<int> value);
    partial void OnBalanceChanged();
    partial void OnCountyIdChanging(System.Nullable<int> value);
    partial void OnCountyIdChanged();
    partial void OnBirthdayChanging(System.Nullable<int> value);
    partial void OnBirthdayChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDegreeIdChanging(System.Nullable<int> value);
    partial void OnDegreeIdChanged();
    #endregion
		
		public Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			this._Degree = default(EntityRef<Degree>);
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalId", DbType="NVarChar(16)")]
		public string NationalId
		{
			get
			{
				return this._NationalId;
			}
			set
			{
				if ((this._NationalId != value))
				{
					this.OnNationalIdChanging(value);
					this.SendPropertyChanging();
					this._NationalId = value;
					this.SendPropertyChanged("NationalId");
					this.OnNationalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Int")]
		public System.Nullable<int> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", DbType="Int")]
		public System.Nullable<int> CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Int")]
		public System.Nullable<int> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeId", DbType="Int")]
		public System.Nullable<int> DegreeId
		{
			get
			{
				return this._DegreeId;
			}
			set
			{
				if ((this._DegreeId != value))
				{
					if (this._Degree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDegreeIdChanging(value);
					this.SendPropertyChanging();
					this._DegreeId = value;
					this.SendPropertyChanged("DegreeId");
					this.OnDegreeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Profile", Storage="_City", ThisKey="CityId", OtherKey="CityId", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._CityId = value.CityId;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Profile", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Degree_Profile", Storage="_Degree", ThisKey="DegreeId", OtherKey="DegreeId", IsForeignKey=true)]
		public Degree Degree
		{
			get
			{
				return this._Degree.Entity;
			}
			set
			{
				Degree previousValue = this._Degree.Entity;
				if (((previousValue != value) 
							|| (this._Degree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Degree.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Degree.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._DegreeId = value.DegreeId;
					}
					else
					{
						this._DegreeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Degree");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Profile", Storage="_WebinarDateTime", ThisKey="Birthday", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._Birthday = value.id;
					}
					else
					{
						this._Birthday = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionStatus")]
	public partial class QuestionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StatusName;
		
		private EntitySet<Chat> _Chats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public QuestionStatus()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionStatus_Chat", Storage="_Chats", ThisKey="Id", OtherKey="QuestionStatus")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.QuestionStatus1 = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.QuestionStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Server")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IP;
		
		private System.Nullable<int> _UpLink;
		
		private string _Status;
		
		private string _Type;
		
		private EntitySet<SessionService> _SessionServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnUpLinkChanging(System.Nullable<int> value);
    partial void OnUpLinkChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Server()
		{
			this._SessionServices = new EntitySet<SessionService>(new Action<SessionService>(this.attach_SessionServices), new Action<SessionService>(this.detach_SessionServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpLink", DbType="Int")]
		public System.Nullable<int> UpLink
		{
			get
			{
				return this._UpLink;
			}
			set
			{
				if ((this._UpLink != value))
				{
					this.OnUpLinkChanging(value);
					this.SendPropertyChanging();
					this._UpLink = value;
					this.SendPropertyChanged("UpLink");
					this.OnUpLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_SessionService", Storage="_SessionServices", ThisKey="IP", OtherKey="ServerIP")]
		public EntitySet<SessionService> SessionServices
		{
			get
			{
				return this._SessionServices;
			}
			set
			{
				this._SessionServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.Server = this;
		}
		
		private void detach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.Server = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceType")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceTypeId;
		
		private string _ServiceTypeName;
		
		private EntitySet<SessionService> _SessionServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTypeIdChanging(int value);
    partial void OnServiceTypeIdChanged();
    partial void OnServiceTypeNameChanging(string value);
    partial void OnServiceTypeNameChanged();
    #endregion
		
		public ServiceType()
		{
			this._SessionServices = new EntitySet<SessionService>(new Action<SessionService>(this.attach_SessionServices), new Action<SessionService>(this.detach_SessionServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceTypeId
		{
			get
			{
				return this._ServiceTypeId;
			}
			set
			{
				if ((this._ServiceTypeId != value))
				{
					this.OnServiceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeId = value;
					this.SendPropertyChanged("ServiceTypeId");
					this.OnServiceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeName", DbType="NVarChar(50)")]
		public string ServiceTypeName
		{
			get
			{
				return this._ServiceTypeName;
			}
			set
			{
				if ((this._ServiceTypeName != value))
				{
					this.OnServiceTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeName = value;
					this.SendPropertyChanged("ServiceTypeName");
					this.OnServiceTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_SessionService", Storage="_SessionServices", ThisKey="ServiceTypeId", OtherKey="ServiceTypeId")]
		public EntitySet<SessionService> SessionServices
		{
			get
			{
				return this._SessionServices;
			}
			set
			{
				this._SessionServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionId;
		
		private System.Guid _PresentorId;
		
		private string _SessionName;
		
		private int _SessionType;
		
		private string _MasterKey;
		
		private System.Nullable<int> _BeginTime;
		
		private System.Nullable<int> _EndTime;
		
		private System.Nullable<int> _Capacity;
		
		private string _Fee;
		
		private string _Wallpaper;
		
		private string _Keywords;
		
		private string _Description;
		
		private System.Guid _SessionAdmin;
		
		private System.Nullable<int> _ReminderHourBefore;
		
		private System.Nullable<int> _StateId;
		
		private System.Nullable<bool> _SMSSend;
		
		private System.Nullable<int> _PrimaryContentID;
		
		private string _FeeForEach;
		
		private string _Why;
		
		private string _Level;
		
		private string _Learner;
		
		private EntitySet<Chat> _Chats;
		
		private EntitySet<SessionFile> _SessionFiles;
		
		private EntitySet<SessionInvite> _SessionInvites;
		
		private EntitySet<SessionRequest> _SessionRequests;
		
		private EntitySet<SessionService> _SessionServices;
		
		private EntitySet<SessionStatus> _SessionStatus;
		
		private EntitySet<SessionVideo> _SessionVideos;
		
		private EntitySet<UserInSession> _UserInSessions;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_User> _aspnet_User1;
		
		private EntityRef<SessionState> _SessionState;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnPresentorIdChanging(System.Guid value);
    partial void OnPresentorIdChanged();
    partial void OnSessionNameChanging(string value);
    partial void OnSessionNameChanged();
    partial void OnSessionTypeChanging(int value);
    partial void OnSessionTypeChanged();
    partial void OnMasterKeyChanging(string value);
    partial void OnMasterKeyChanged();
    partial void OnBeginTimeChanging(System.Nullable<int> value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<int> value);
    partial void OnEndTimeChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnFeeChanging(string value);
    partial void OnFeeChanged();
    partial void OnWallpaperChanging(string value);
    partial void OnWallpaperChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSessionAdminChanging(System.Guid value);
    partial void OnSessionAdminChanged();
    partial void OnReminderHourBeforeChanging(System.Nullable<int> value);
    partial void OnReminderHourBeforeChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnSMSSendChanging(System.Nullable<bool> value);
    partial void OnSMSSendChanged();
    partial void OnPrimaryContentIDChanging(System.Nullable<int> value);
    partial void OnPrimaryContentIDChanged();
    partial void OnFeeForEachChanging(string value);
    partial void OnFeeForEachChanged();
    partial void OnWhyChanging(string value);
    partial void OnWhyChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnLearnerChanging(string value);
    partial void OnLearnerChanged();
    #endregion
		
		public Session()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			this._SessionFiles = new EntitySet<SessionFile>(new Action<SessionFile>(this.attach_SessionFiles), new Action<SessionFile>(this.detach_SessionFiles));
			this._SessionInvites = new EntitySet<SessionInvite>(new Action<SessionInvite>(this.attach_SessionInvites), new Action<SessionInvite>(this.detach_SessionInvites));
			this._SessionRequests = new EntitySet<SessionRequest>(new Action<SessionRequest>(this.attach_SessionRequests), new Action<SessionRequest>(this.detach_SessionRequests));
			this._SessionServices = new EntitySet<SessionService>(new Action<SessionService>(this.attach_SessionServices), new Action<SessionService>(this.detach_SessionServices));
			this._SessionStatus = new EntitySet<SessionStatus>(new Action<SessionStatus>(this.attach_SessionStatus), new Action<SessionStatus>(this.detach_SessionStatus));
			this._SessionVideos = new EntitySet<SessionVideo>(new Action<SessionVideo>(this.attach_SessionVideos), new Action<SessionVideo>(this.detach_SessionVideos));
			this._UserInSessions = new EntitySet<UserInSession>(new Action<UserInSession>(this.attach_UserInSessions), new Action<UserInSession>(this.detach_UserInSessions));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_User1 = default(EntityRef<aspnet_User>);
			this._SessionState = default(EntityRef<SessionState>);
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			this._WebinarDateTime1 = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PresentorId
		{
			get
			{
				return this._PresentorId;
			}
			set
			{
				if ((this._PresentorId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPresentorIdChanging(value);
					this.SendPropertyChanging();
					this._PresentorId = value;
					this.SendPropertyChanged("PresentorId");
					this.OnPresentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionName", DbType="NVarChar(MAX)")]
		public string SessionName
		{
			get
			{
				return this._SessionName;
			}
			set
			{
				if ((this._SessionName != value))
				{
					this.OnSessionNameChanging(value);
					this.SendPropertyChanging();
					this._SessionName = value;
					this.SendPropertyChanged("SessionName");
					this.OnSessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionType", DbType="Int NOT NULL")]
		public int SessionType
		{
			get
			{
				return this._SessionType;
			}
			set
			{
				if ((this._SessionType != value))
				{
					this.OnSessionTypeChanging(value);
					this.SendPropertyChanging();
					this._SessionType = value;
					this.SendPropertyChanged("SessionType");
					this.OnSessionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterKey", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string MasterKey
		{
			get
			{
				return this._MasterKey;
			}
			set
			{
				if ((this._MasterKey != value))
				{
					this.OnMasterKeyChanging(value);
					this.SendPropertyChanging();
					this._MasterKey = value;
					this.SendPropertyChanged("MasterKey");
					this.OnMasterKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="Int")]
		public System.Nullable<int> BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int")]
		public System.Nullable<int> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					if (this._WebinarDateTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="NVarChar(50)")]
		public string Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wallpaper", DbType="NVarChar(MAX)")]
		public string Wallpaper
		{
			get
			{
				return this._Wallpaper;
			}
			set
			{
				if ((this._Wallpaper != value))
				{
					this.OnWallpaperChanging(value);
					this.SendPropertyChanging();
					this._Wallpaper = value;
					this.SendPropertyChanged("Wallpaper");
					this.OnWallpaperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionAdmin", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionAdmin
		{
			get
			{
				return this._SessionAdmin;
			}
			set
			{
				if ((this._SessionAdmin != value))
				{
					if (this._aspnet_User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionAdminChanging(value);
					this.SendPropertyChanging();
					this._SessionAdmin = value;
					this.SendPropertyChanged("SessionAdmin");
					this.OnSessionAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReminderHourBefore", DbType="Int")]
		public System.Nullable<int> ReminderHourBefore
		{
			get
			{
				return this._ReminderHourBefore;
			}
			set
			{
				if ((this._ReminderHourBefore != value))
				{
					this.OnReminderHourBeforeChanging(value);
					this.SendPropertyChanging();
					this._ReminderHourBefore = value;
					this.SendPropertyChanged("ReminderHourBefore");
					this.OnReminderHourBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._SessionState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSSend", DbType="Bit")]
		public System.Nullable<bool> SMSSend
		{
			get
			{
				return this._SMSSend;
			}
			set
			{
				if ((this._SMSSend != value))
				{
					this.OnSMSSendChanging(value);
					this.SendPropertyChanging();
					this._SMSSend = value;
					this.SendPropertyChanged("SMSSend");
					this.OnSMSSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContentID", DbType="Int")]
		public System.Nullable<int> PrimaryContentID
		{
			get
			{
				return this._PrimaryContentID;
			}
			set
			{
				if ((this._PrimaryContentID != value))
				{
					this.OnPrimaryContentIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContentID = value;
					this.SendPropertyChanged("PrimaryContentID");
					this.OnPrimaryContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeForEach", DbType="NVarChar(50)")]
		public string FeeForEach
		{
			get
			{
				return this._FeeForEach;
			}
			set
			{
				if ((this._FeeForEach != value))
				{
					this.OnFeeForEachChanging(value);
					this.SendPropertyChanging();
					this._FeeForEach = value;
					this.SendPropertyChanged("FeeForEach");
					this.OnFeeForEachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Why", DbType="NVarChar(MAX)")]
		public string Why
		{
			get
			{
				return this._Why;
			}
			set
			{
				if ((this._Why != value))
				{
					this.OnWhyChanging(value);
					this.SendPropertyChanging();
					this._Why = value;
					this.SendPropertyChanged("Why");
					this.OnWhyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="NVarChar(MAX)")]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Learner", DbType="NVarChar(MAX)")]
		public string Learner
		{
			get
			{
				return this._Learner;
			}
			set
			{
				if ((this._Learner != value))
				{
					this.OnLearnerChanging(value);
					this.SendPropertyChanging();
					this._Learner = value;
					this.SendPropertyChanged("Learner");
					this.OnLearnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Chat", Storage="_Chats", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionFile", Storage="_SessionFiles", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<SessionFile> SessionFiles
		{
			get
			{
				return this._SessionFiles;
			}
			set
			{
				this._SessionFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionInvite", Storage="_SessionInvites", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<SessionInvite> SessionInvites
		{
			get
			{
				return this._SessionInvites;
			}
			set
			{
				this._SessionInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionRequest", Storage="_SessionRequests", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<SessionRequest> SessionRequests
		{
			get
			{
				return this._SessionRequests;
			}
			set
			{
				this._SessionRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionService", Storage="_SessionServices", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<SessionService> SessionServices
		{
			get
			{
				return this._SessionServices;
			}
			set
			{
				this._SessionServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionStatus", Storage="_SessionStatus", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<SessionStatus> SessionStatus
		{
			get
			{
				return this._SessionStatus;
			}
			set
			{
				this._SessionStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionVideo", Storage="_SessionVideos", ThisKey="SessionId", OtherKey="SessionID")]
		public EntitySet<SessionVideo> SessionVideos
		{
			get
			{
				return this._SessionVideos;
			}
			set
			{
				this._SessionVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_UserInSession", Storage="_UserInSessions", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<UserInSession> UserInSessions
		{
			get
			{
				return this._UserInSessions;
			}
			set
			{
				this._UserInSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Session", Storage="_aspnet_User", ThisKey="PresentorId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._PresentorId = value.UserId;
					}
					else
					{
						this._PresentorId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Session1", Storage="_aspnet_User1", ThisKey="SessionAdmin", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User1
		{
			get
			{
				return this._aspnet_User1.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User1.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User1.Entity = null;
						previousValue.Sessions1.Remove(this);
					}
					this._aspnet_User1.Entity = value;
					if ((value != null))
					{
						value.Sessions1.Add(this);
						this._SessionAdmin = value.UserId;
					}
					else
					{
						this._SessionAdmin = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionState_Session", Storage="_SessionState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public SessionState SessionState
		{
			get
			{
				return this._SessionState.Entity;
			}
			set
			{
				SessionState previousValue = this._SessionState.Entity;
				if (((previousValue != value) 
							|| (this._SessionState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionState.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._SessionState.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SessionState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session", Storage="_WebinarDateTime", ThisKey="BeginTime", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._BeginTime = value.id;
					}
					else
					{
						this._BeginTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session1", Storage="_WebinarDateTime1", ThisKey="EndTime", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime1
		{
			get
			{
				return this._WebinarDateTime1.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime1.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime1.Entity = null;
						previousValue.Sessions1.Remove(this);
					}
					this._WebinarDateTime1.Entity = value;
					if ((value != null))
					{
						value.Sessions1.Add(this);
						this._EndTime = value.id;
					}
					else
					{
						this._EndTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionFiles(SessionFile entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionFiles(SessionFile entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionServices(SessionService entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionStatus(SessionStatus entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionStatus(SessionStatus entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionVideos(SessionVideo entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionVideos(SessionVideo entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_UserInSessions(UserInSession entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_UserInSessions(UserInSession entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionAdvertise")]
	public partial class SessionAdvertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SessionID;
		
		private string _VideoName;
		
		private System.Nullable<System.DateTime> _VideoDate;
		
		private System.Nullable<System.Guid> _VideoUUID;
		
		private System.Nullable<bool> _VideoIsEnable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(System.Nullable<int> value);
    partial void OnSessionIDChanged();
    partial void OnVideoNameChanging(string value);
    partial void OnVideoNameChanged();
    partial void OnVideoDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVideoDateChanged();
    partial void OnVideoUUIDChanging(System.Nullable<System.Guid> value);
    partial void OnVideoUUIDChanged();
    partial void OnVideoIsEnableChanging(System.Nullable<bool> value);
    partial void OnVideoIsEnableChanged();
    #endregion
		
		public SessionAdvertise()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int")]
		public System.Nullable<int> SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoName", DbType="NVarChar(MAX)")]
		public string VideoName
		{
			get
			{
				return this._VideoName;
			}
			set
			{
				if ((this._VideoName != value))
				{
					this.OnVideoNameChanging(value);
					this.SendPropertyChanging();
					this._VideoName = value;
					this.SendPropertyChanged("VideoName");
					this.OnVideoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VideoDate
		{
			get
			{
				return this._VideoDate;
			}
			set
			{
				if ((this._VideoDate != value))
				{
					this.OnVideoDateChanging(value);
					this.SendPropertyChanging();
					this._VideoDate = value;
					this.SendPropertyChanged("VideoDate");
					this.OnVideoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VideoUUID
		{
			get
			{
				return this._VideoUUID;
			}
			set
			{
				if ((this._VideoUUID != value))
				{
					this.OnVideoUUIDChanging(value);
					this.SendPropertyChanging();
					this._VideoUUID = value;
					this.SendPropertyChanged("VideoUUID");
					this.OnVideoUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoIsEnable", DbType="Bit")]
		public System.Nullable<bool> VideoIsEnable
		{
			get
			{
				return this._VideoIsEnable;
			}
			set
			{
				if ((this._VideoIsEnable != value))
				{
					this.OnVideoIsEnableChanging(value);
					this.SendPropertyChanging();
					this._VideoIsEnable = value;
					this.SendPropertyChanged("VideoIsEnable");
					this.OnVideoIsEnableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionFiles")]
	public partial class SessionFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionFileId;
		
		private string _FileURL;
		
		private int _SessionId;
		
		private System.Nullable<int> _FileSize;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionFileIdChanging(int value);
    partial void OnSessionFileIdChanged();
    partial void OnFileURLChanging(string value);
    partial void OnFileURLChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnFileSizeChanging(System.Nullable<int> value);
    partial void OnFileSizeChanged();
    #endregion
		
		public SessionFile()
		{
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionFileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionFileId
		{
			get
			{
				return this._SessionFileId;
			}
			set
			{
				if ((this._SessionFileId != value))
				{
					this.OnSessionFileIdChanging(value);
					this.SendPropertyChanging();
					this._SessionFileId = value;
					this.SendPropertyChanged("SessionFileId");
					this.OnSessionFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileURL
		{
			get
			{
				return this._FileURL;
			}
			set
			{
				if ((this._FileURL != value))
				{
					this.OnFileURLChanging(value);
					this.SendPropertyChanging();
					this._FileURL = value;
					this.SendPropertyChanged("FileURL");
					this.OnFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="Int")]
		public System.Nullable<int> FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionFile", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionFiles.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionFiles.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionInvite")]
	public partial class SessionInvite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InviteId;
		
		private int _SessionId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<int> _InviteDate;
		
		private string _Email;
		
		private string _MobilePin;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInviteIdChanging(int value);
    partial void OnInviteIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnInviteDateChanging(System.Nullable<int> value);
    partial void OnInviteDateChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobilePinChanging(string value);
    partial void OnMobilePinChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public SessionInvite()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Session = default(EntityRef<Session>);
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InviteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InviteId
		{
			get
			{
				return this._InviteId;
			}
			set
			{
				if ((this._InviteId != value))
				{
					this.OnInviteIdChanging(value);
					this.SendPropertyChanging();
					this._InviteId = value;
					this.SendPropertyChanged("InviteId");
					this.OnInviteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InviteDate", DbType="Int")]
		public System.Nullable<int> InviteDate
		{
			get
			{
				return this._InviteDate;
			}
			set
			{
				if ((this._InviteDate != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInviteDateChanging(value);
					this.SendPropertyChanging();
					this._InviteDate = value;
					this.SendPropertyChanged("InviteDate");
					this.OnInviteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePin", DbType="NVarChar(50)")]
		public string MobilePin
		{
			get
			{
				return this._MobilePin;
			}
			set
			{
				if ((this._MobilePin != value))
				{
					this.OnMobilePinChanging(value);
					this.SendPropertyChanging();
					this._MobilePin = value;
					this.SendPropertyChanged("MobilePin");
					this.OnMobilePinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SessionInvite", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.SessionInvites.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.SessionInvites.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionInvite", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionInvites.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionInvites.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionInvite", Storage="_WebinarDateTime", ThisKey="InviteDate", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.SessionInvites.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.SessionInvites.Add(this);
						this._InviteDate = value.id;
					}
					else
					{
						this._InviteDate = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionRequest")]
	public partial class SessionRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestId;
		
		private int _SessionId;
		
		private int _RequestDate;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _Result;
		
		private string _ResultDescription;
		
		private System.Nullable<int> _ResultDate;
		
		private string _RequestEmail;
		
		private string _RequestMobile;
		
		private System.Nullable<bool> _IsPayed;
		
		private EntitySet<TemporalTestsAccount> _TemporalTestsAccounts;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIdChanging(int value);
    partial void OnRequestIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnRequestDateChanging(int value);
    partial void OnRequestDateChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnResultDescriptionChanging(string value);
    partial void OnResultDescriptionChanged();
    partial void OnResultDateChanging(System.Nullable<int> value);
    partial void OnResultDateChanged();
    partial void OnRequestEmailChanging(string value);
    partial void OnRequestEmailChanged();
    partial void OnRequestMobileChanging(string value);
    partial void OnRequestMobileChanged();
    partial void OnIsPayedChanging(System.Nullable<bool> value);
    partial void OnIsPayedChanged();
    #endregion
		
		public SessionRequest()
		{
			this._TemporalTestsAccounts = new EntitySet<TemporalTestsAccount>(new Action<TemporalTestsAccount>(this.attach_TemporalTestsAccounts), new Action<TemporalTestsAccount>(this.detach_TemporalTestsAccounts));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Session = default(EntityRef<Session>);
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			this._WebinarDateTime1 = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="Int NOT NULL")]
		public int RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultDescription", DbType="NVarChar(50)")]
		public string ResultDescription
		{
			get
			{
				return this._ResultDescription;
			}
			set
			{
				if ((this._ResultDescription != value))
				{
					this.OnResultDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ResultDescription = value;
					this.SendPropertyChanged("ResultDescription");
					this.OnResultDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultDate", DbType="Int")]
		public System.Nullable<int> ResultDate
		{
			get
			{
				return this._ResultDate;
			}
			set
			{
				if ((this._ResultDate != value))
				{
					if (this._WebinarDateTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultDateChanging(value);
					this.SendPropertyChanging();
					this._ResultDate = value;
					this.SendPropertyChanged("ResultDate");
					this.OnResultDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestEmail", DbType="NVarChar(50)")]
		public string RequestEmail
		{
			get
			{
				return this._RequestEmail;
			}
			set
			{
				if ((this._RequestEmail != value))
				{
					this.OnRequestEmailChanging(value);
					this.SendPropertyChanging();
					this._RequestEmail = value;
					this.SendPropertyChanged("RequestEmail");
					this.OnRequestEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestMobile", DbType="NVarChar(50)")]
		public string RequestMobile
		{
			get
			{
				return this._RequestMobile;
			}
			set
			{
				if ((this._RequestMobile != value))
				{
					this.OnRequestMobileChanging(value);
					this.SendPropertyChanging();
					this._RequestMobile = value;
					this.SendPropertyChanged("RequestMobile");
					this.OnRequestMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPayed", DbType="Bit")]
		public System.Nullable<bool> IsPayed
		{
			get
			{
				return this._IsPayed;
			}
			set
			{
				if ((this._IsPayed != value))
				{
					this.OnIsPayedChanging(value);
					this.SendPropertyChanging();
					this._IsPayed = value;
					this.SendPropertyChanged("IsPayed");
					this.OnIsPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionRequest_TemporalTestsAccount", Storage="_TemporalTestsAccounts", ThisKey="RequestId", OtherKey="RequestID")]
		public EntitySet<TemporalTestsAccount> TemporalTestsAccounts
		{
			get
			{
				return this._TemporalTestsAccounts;
			}
			set
			{
				this._TemporalTestsAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SessionRequest", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.SessionRequests.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.SessionRequests.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionRequest", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionRequests.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionRequests.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionRequest", Storage="_WebinarDateTime", ThisKey="RequestDate", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.SessionRequests.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.SessionRequests.Add(this);
						this._RequestDate = value.id;
					}
					else
					{
						this._RequestDate = default(int);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionRequest1", Storage="_WebinarDateTime1", ThisKey="ResultDate", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime1
		{
			get
			{
				return this._WebinarDateTime1.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime1.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime1.Entity = null;
						previousValue.SessionRequests1.Remove(this);
					}
					this._WebinarDateTime1.Entity = value;
					if ((value != null))
					{
						value.SessionRequests1.Add(this);
						this._ResultDate = value.id;
					}
					else
					{
						this._ResultDate = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemporalTestsAccounts(TemporalTestsAccount entity)
		{
			this.SendPropertyChanging();
			entity.SessionRequest = this;
		}
		
		private void detach_TemporalTestsAccounts(TemporalTestsAccount entity)
		{
			this.SendPropertyChanging();
			entity.SessionRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionServices")]
	public partial class SessionService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionServicesId;
		
		private int _SessionId;
		
		private string _ServerIP;
		
		private System.Nullable<int> _ServerPort;
		
		private System.Nullable<int> _Bitrate;
		
		private string _Codec;
		
		private System.Nullable<int> _AssignedCount;
		
		private System.Nullable<int> _ServiceTypeId;
		
		private string _VodAddress;
		
		private string _ServiceDescribtion;
		
		private string _ServiceTopic;
		
		private EntitySet<UserInService> _UserInServices;
		
		private EntityRef<Server> _Server;
		
		private EntityRef<ServiceType> _ServiceType;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionServicesIdChanging(int value);
    partial void OnSessionServicesIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnServerIPChanging(string value);
    partial void OnServerIPChanged();
    partial void OnServerPortChanging(System.Nullable<int> value);
    partial void OnServerPortChanged();
    partial void OnBitrateChanging(System.Nullable<int> value);
    partial void OnBitrateChanged();
    partial void OnCodecChanging(string value);
    partial void OnCodecChanged();
    partial void OnAssignedCountChanging(System.Nullable<int> value);
    partial void OnAssignedCountChanged();
    partial void OnServiceTypeIdChanging(System.Nullable<int> value);
    partial void OnServiceTypeIdChanged();
    partial void OnVodAddressChanging(string value);
    partial void OnVodAddressChanged();
    partial void OnServiceDescribtionChanging(string value);
    partial void OnServiceDescribtionChanged();
    partial void OnServiceTopicChanging(string value);
    partial void OnServiceTopicChanged();
    #endregion
		
		public SessionService()
		{
			this._UserInServices = new EntitySet<UserInService>(new Action<UserInService>(this.attach_UserInServices), new Action<UserInService>(this.detach_UserInServices));
			this._Server = default(EntityRef<Server>);
			this._ServiceType = default(EntityRef<ServiceType>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionServicesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionServicesId
		{
			get
			{
				return this._SessionServicesId;
			}
			set
			{
				if ((this._SessionServicesId != value))
				{
					this.OnSessionServicesIdChanging(value);
					this.SendPropertyChanging();
					this._SessionServicesId = value;
					this.SendPropertyChanged("SessionServicesId");
					this.OnSessionServicesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerIP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServerIP
		{
			get
			{
				return this._ServerIP;
			}
			set
			{
				if ((this._ServerIP != value))
				{
					if (this._Server.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerIPChanging(value);
					this.SendPropertyChanging();
					this._ServerIP = value;
					this.SendPropertyChanged("ServerIP");
					this.OnServerIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerPort", DbType="Int")]
		public System.Nullable<int> ServerPort
		{
			get
			{
				return this._ServerPort;
			}
			set
			{
				if ((this._ServerPort != value))
				{
					this.OnServerPortChanging(value);
					this.SendPropertyChanging();
					this._ServerPort = value;
					this.SendPropertyChanged("ServerPort");
					this.OnServerPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bitrate", DbType="Int")]
		public System.Nullable<int> Bitrate
		{
			get
			{
				return this._Bitrate;
			}
			set
			{
				if ((this._Bitrate != value))
				{
					this.OnBitrateChanging(value);
					this.SendPropertyChanging();
					this._Bitrate = value;
					this.SendPropertyChanged("Bitrate");
					this.OnBitrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codec", DbType="NVarChar(50)")]
		public string Codec
		{
			get
			{
				return this._Codec;
			}
			set
			{
				if ((this._Codec != value))
				{
					this.OnCodecChanging(value);
					this.SendPropertyChanging();
					this._Codec = value;
					this.SendPropertyChanged("Codec");
					this.OnCodecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedCount", DbType="Int")]
		public System.Nullable<int> AssignedCount
		{
			get
			{
				return this._AssignedCount;
			}
			set
			{
				if ((this._AssignedCount != value))
				{
					this.OnAssignedCountChanging(value);
					this.SendPropertyChanging();
					this._AssignedCount = value;
					this.SendPropertyChanged("AssignedCount");
					this.OnAssignedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeId", DbType="Int")]
		public System.Nullable<int> ServiceTypeId
		{
			get
			{
				return this._ServiceTypeId;
			}
			set
			{
				if ((this._ServiceTypeId != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeId = value;
					this.SendPropertyChanged("ServiceTypeId");
					this.OnServiceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VodAddress", DbType="NVarChar(MAX)")]
		public string VodAddress
		{
			get
			{
				return this._VodAddress;
			}
			set
			{
				if ((this._VodAddress != value))
				{
					this.OnVodAddressChanging(value);
					this.SendPropertyChanging();
					this._VodAddress = value;
					this.SendPropertyChanged("VodAddress");
					this.OnVodAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDescribtion", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ServiceDescribtion
		{
			get
			{
				return this._ServiceDescribtion;
			}
			set
			{
				if ((this._ServiceDescribtion != value))
				{
					this.OnServiceDescribtionChanging(value);
					this.SendPropertyChanging();
					this._ServiceDescribtion = value;
					this.SendPropertyChanged("ServiceDescribtion");
					this.OnServiceDescribtionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTopic", DbType="NVarChar(MAX)")]
		public string ServiceTopic
		{
			get
			{
				return this._ServiceTopic;
			}
			set
			{
				if ((this._ServiceTopic != value))
				{
					this.OnServiceTopicChanging(value);
					this.SendPropertyChanging();
					this._ServiceTopic = value;
					this.SendPropertyChanged("ServiceTopic");
					this.OnServiceTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionService_UserInService", Storage="_UserInServices", ThisKey="SessionServicesId", OtherKey="SessionServiceId")]
		public EntitySet<UserInService> UserInServices
		{
			get
			{
				return this._UserInServices;
			}
			set
			{
				this._UserInServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_SessionService", Storage="_Server", ThisKey="ServerIP", OtherKey="IP", IsForeignKey=true)]
		public Server Server
		{
			get
			{
				return this._Server.Entity;
			}
			set
			{
				Server previousValue = this._Server.Entity;
				if (((previousValue != value) 
							|| (this._Server.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Server.Entity = null;
						previousValue.SessionServices.Remove(this);
					}
					this._Server.Entity = value;
					if ((value != null))
					{
						value.SessionServices.Add(this);
						this._ServerIP = value.IP;
					}
					else
					{
						this._ServerIP = default(string);
					}
					this.SendPropertyChanged("Server");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_SessionService", Storage="_ServiceType", ThisKey="ServiceTypeId", OtherKey="ServiceTypeId", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.SessionServices.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.SessionServices.Add(this);
						this._ServiceTypeId = value.ServiceTypeId;
					}
					else
					{
						this._ServiceTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionService", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionServices.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionServices.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInServices(UserInService entity)
		{
			this.SendPropertyChanging();
			entity.SessionService = this;
		}
		
		private void detach_UserInServices(UserInService entity)
		{
			this.SendPropertyChanging();
			entity.SessionService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionState")]
	public partial class SessionState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateId;
		
		private string _State;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<SessionStatus> _SessionStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public SessionState()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._SessionStatus = new EntitySet<SessionStatus>(new Action<SessionStatus>(this.attach_SessionStatus), new Action<SessionStatus>(this.detach_SessionStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionState_Session", Storage="_Sessions", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionState_SessionStatus", Storage="_SessionStatus", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<SessionStatus> SessionStatus
		{
			get
			{
				return this._SessionStatus;
			}
			set
			{
				this._SessionStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.SessionState = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.SessionState = null;
		}
		
		private void attach_SessionStatus(SessionStatus entity)
		{
			this.SendPropertyChanging();
			entity.SessionState = this;
		}
		
		private void detach_SessionStatus(SessionStatus entity)
		{
			this.SendPropertyChanging();
			entity.SessionState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionStatus")]
	public partial class SessionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusId;
		
		private System.Nullable<int> _StateId;
		
		private System.Nullable<int> _RemainedCapacity;
		
		private int _SessionId;
		
		private System.Nullable<int> _DateTime;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<SessionState> _SessionState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnRemainedCapacityChanging(System.Nullable<int> value);
    partial void OnRemainedCapacityChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnDateTimeChanging(System.Nullable<int> value);
    partial void OnDateTimeChanged();
    #endregion
		
		public SessionStatus()
		{
			this._Session = default(EntityRef<Session>);
			this._SessionState = default(EntityRef<SessionState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._SessionState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainedCapacity", DbType="Int")]
		public System.Nullable<int> RemainedCapacity
		{
			get
			{
				return this._RemainedCapacity;
			}
			set
			{
				if ((this._RemainedCapacity != value))
				{
					this.OnRemainedCapacityChanging(value);
					this.SendPropertyChanging();
					this._RemainedCapacity = value;
					this.SendPropertyChanged("RemainedCapacity");
					this.OnRemainedCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="Int")]
		public System.Nullable<int> DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionStatus", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionStatus.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionStatus.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionState_SessionStatus", Storage="_SessionState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public SessionState SessionState
		{
			get
			{
				return this._SessionState.Entity;
			}
			set
			{
				SessionState previousValue = this._SessionState.Entity;
				if (((previousValue != value) 
							|| (this._SessionState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionState.Entity = null;
						previousValue.SessionStatus.Remove(this);
					}
					this._SessionState.Entity = value;
					if ((value != null))
					{
						value.SessionStatus.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SessionState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionVideos")]
	public partial class SessionVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SessionID;
		
		private string _VideoName;
		
		private System.Nullable<System.Guid> _VideoUUID;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private System.Nullable<bool> _IsAdvertise;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(System.Nullable<int> value);
    partial void OnSessionIDChanged();
    partial void OnVideoNameChanging(string value);
    partial void OnVideoNameChanged();
    partial void OnVideoUUIDChanging(System.Nullable<System.Guid> value);
    partial void OnVideoUUIDChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnIsAdvertiseChanging(System.Nullable<bool> value);
    partial void OnIsAdvertiseChanged();
    #endregion
		
		public SessionVideo()
		{
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int")]
		public System.Nullable<int> SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoName", DbType="NVarChar(MAX)")]
		public string VideoName
		{
			get
			{
				return this._VideoName;
			}
			set
			{
				if ((this._VideoName != value))
				{
					this.OnVideoNameChanging(value);
					this.SendPropertyChanging();
					this._VideoName = value;
					this.SendPropertyChanged("VideoName");
					this.OnVideoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> VideoUUID
		{
			get
			{
				return this._VideoUUID;
			}
			set
			{
				if ((this._VideoUUID != value))
				{
					this.OnVideoUUIDChanging(value);
					this.SendPropertyChanging();
					this._VideoUUID = value;
					this.SendPropertyChanged("VideoUUID");
					this.OnVideoUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdvertise", DbType="Bit")]
		public System.Nullable<bool> IsAdvertise
		{
			get
			{
				return this._IsAdvertise;
			}
			set
			{
				if ((this._IsAdvertise != value))
				{
					this.OnIsAdvertiseChanging(value);
					this.SendPropertyChanging();
					this._IsAdvertise = value;
					this.SendPropertyChanged("IsAdvertise");
					this.OnIsAdvertiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionVideo", Storage="_Session", ThisKey="SessionID", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionVideos.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionVideos.Add(this);
						this._SessionID = value.SessionId;
					}
					else
					{
						this._SessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SettingsProperty")]
	public partial class SettingsProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PropertyName;
		
		private string _PropertyValue;
		
		private int _SettingsId;
		
		private int _propertyId;
		
		private EntityRef<ApplicationSetting> _ApplicationSetting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyValueChanging(string value);
    partial void OnPropertyValueChanged();
    partial void OnSettingsIdChanging(int value);
    partial void OnSettingsIdChanged();
    partial void OnpropertyIdChanging(int value);
    partial void OnpropertyIdChanged();
    #endregion
		
		public SettingsProperty()
		{
			this._ApplicationSetting = default(EntityRef<ApplicationSetting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="NVarChar(50)")]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValue", DbType="NVarChar(50)")]
		public string PropertyValue
		{
			get
			{
				return this._PropertyValue;
			}
			set
			{
				if ((this._PropertyValue != value))
				{
					this.OnPropertyValueChanging(value);
					this.SendPropertyChanging();
					this._PropertyValue = value;
					this.SendPropertyChanged("PropertyValue");
					this.OnPropertyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", DbType="Int NOT NULL")]
		public int SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					if (this._ApplicationSetting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingsIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsId = value;
					this.SendPropertyChanged("SettingsId");
					this.OnSettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int propertyId
		{
			get
			{
				return this._propertyId;
			}
			set
			{
				if ((this._propertyId != value))
				{
					this.OnpropertyIdChanging(value);
					this.SendPropertyChanging();
					this._propertyId = value;
					this.SendPropertyChanged("propertyId");
					this.OnpropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationSetting_SettingsProperty", Storage="_ApplicationSetting", ThisKey="SettingsId", OtherKey="SettingsId", IsForeignKey=true)]
		public ApplicationSetting ApplicationSetting
		{
			get
			{
				return this._ApplicationSetting.Entity;
			}
			set
			{
				ApplicationSetting previousValue = this._ApplicationSetting.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationSetting.Entity = null;
						previousValue.SettingsProperties.Remove(this);
					}
					this._ApplicationSetting.Entity = value;
					if ((value != null))
					{
						value.SettingsProperties.Add(this);
						this._SettingsId = value.SettingsId;
					}
					else
					{
						this._SettingsId = default(int);
					}
					this.SendPropertyChanged("ApplicationSetting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private int _TaskTypeId;
		
		private int _TaskStatus;
		
		private System.DateTime _TaskInitDate;
		
		private System.Nullable<int> _TaskPriority;
		
		private System.Nullable<System.DateTime> _TaskRunTime;
		
		private EntitySet<TaskParam> _TaskParams;
		
		private EntityRef<TaskStatus> _TaskStatus1;
		
		private EntityRef<TaskType> _TaskType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnTaskTypeIdChanging(int value);
    partial void OnTaskTypeIdChanged();
    partial void OnTaskStatusChanging(int value);
    partial void OnTaskStatusChanged();
    partial void OnTaskInitDateChanging(System.DateTime value);
    partial void OnTaskInitDateChanged();
    partial void OnTaskPriorityChanging(System.Nullable<int> value);
    partial void OnTaskPriorityChanged();
    partial void OnTaskRunTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskRunTimeChanged();
    #endregion
		
		public Task()
		{
			this._TaskParams = new EntitySet<TaskParam>(new Action<TaskParam>(this.attach_TaskParams), new Action<TaskParam>(this.detach_TaskParams));
			this._TaskStatus1 = default(EntityRef<TaskStatus>);
			this._TaskType = default(EntityRef<TaskType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeId", DbType="Int NOT NULL")]
		public int TaskTypeId
		{
			get
			{
				return this._TaskTypeId;
			}
			set
			{
				if ((this._TaskTypeId != value))
				{
					if (this._TaskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeId = value;
					this.SendPropertyChanged("TaskTypeId");
					this.OnTaskTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatus", DbType="Int NOT NULL")]
		public int TaskStatus
		{
			get
			{
				return this._TaskStatus;
			}
			set
			{
				if ((this._TaskStatus != value))
				{
					if (this._TaskStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskStatusChanging(value);
					this.SendPropertyChanging();
					this._TaskStatus = value;
					this.SendPropertyChanged("TaskStatus");
					this.OnTaskStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskInitDate", DbType="DateTime NOT NULL")]
		public System.DateTime TaskInitDate
		{
			get
			{
				return this._TaskInitDate;
			}
			set
			{
				if ((this._TaskInitDate != value))
				{
					this.OnTaskInitDateChanging(value);
					this.SendPropertyChanging();
					this._TaskInitDate = value;
					this.SendPropertyChanged("TaskInitDate");
					this.OnTaskInitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskPriority", DbType="Int")]
		public System.Nullable<int> TaskPriority
		{
			get
			{
				return this._TaskPriority;
			}
			set
			{
				if ((this._TaskPriority != value))
				{
					this.OnTaskPriorityChanging(value);
					this.SendPropertyChanging();
					this._TaskPriority = value;
					this.SendPropertyChanged("TaskPriority");
					this.OnTaskPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskRunTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskRunTime
		{
			get
			{
				return this._TaskRunTime;
			}
			set
			{
				if ((this._TaskRunTime != value))
				{
					this.OnTaskRunTimeChanging(value);
					this.SendPropertyChanging();
					this._TaskRunTime = value;
					this.SendPropertyChanged("TaskRunTime");
					this.OnTaskRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskParam", Storage="_TaskParams", ThisKey="TaskId", OtherKey="TaskID")]
		public EntitySet<TaskParam> TaskParams
		{
			get
			{
				return this._TaskParams;
			}
			set
			{
				this._TaskParams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskStatus_Task", Storage="_TaskStatus1", ThisKey="TaskStatus", OtherKey="TaskStatusID", IsForeignKey=true)]
		public TaskStatus TaskStatus1
		{
			get
			{
				return this._TaskStatus1.Entity;
			}
			set
			{
				TaskStatus previousValue = this._TaskStatus1.Entity;
				if (((previousValue != value) 
							|| (this._TaskStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStatus1.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskStatus1.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskStatus = value.TaskStatusID;
					}
					else
					{
						this._TaskStatus = default(int);
					}
					this.SendPropertyChanged("TaskStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_TaskType", ThisKey="TaskTypeId", OtherKey="TaskTypeID", IsForeignKey=true)]
		public TaskType TaskType
		{
			get
			{
				return this._TaskType.Entity;
			}
			set
			{
				TaskType previousValue = this._TaskType.Entity;
				if (((previousValue != value) 
							|| (this._TaskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskType.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskType.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskTypeId = value.TaskTypeID;
					}
					else
					{
						this._TaskTypeId = default(int);
					}
					this.SendPropertyChanged("TaskType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskParams(TaskParam entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskParams(TaskParam entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskParams")]
	public partial class TaskParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskParamID;
		
		private string _TaskParamName;
		
		private string _TaskParamValue;
		
		private int _TaskID;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskParamIDChanging(int value);
    partial void OnTaskParamIDChanged();
    partial void OnTaskParamNameChanging(string value);
    partial void OnTaskParamNameChanged();
    partial void OnTaskParamValueChanging(string value);
    partial void OnTaskParamValueChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TaskParam()
		{
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskParamID
		{
			get
			{
				return this._TaskParamID;
			}
			set
			{
				if ((this._TaskParamID != value))
				{
					this.OnTaskParamIDChanging(value);
					this.SendPropertyChanging();
					this._TaskParamID = value;
					this.SendPropertyChanged("TaskParamID");
					this.OnTaskParamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskParamName
		{
			get
			{
				return this._TaskParamName;
			}
			set
			{
				if ((this._TaskParamName != value))
				{
					this.OnTaskParamNameChanging(value);
					this.SendPropertyChanging();
					this._TaskParamName = value;
					this.SendPropertyChanged("TaskParamName");
					this.OnTaskParamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamValue", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TaskParamValue
		{
			get
			{
				return this._TaskParamValue;
			}
			set
			{
				if ((this._TaskParamValue != value))
				{
					this.OnTaskParamValueChanging(value);
					this.SendPropertyChanging();
					this._TaskParamValue = value;
					this.SendPropertyChanged("TaskParamValue");
					this.OnTaskParamValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskParam", Storage="_Task", ThisKey="TaskID", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskParams.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskParams.Add(this);
						this._TaskID = value.TaskId;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskStatus")]
	public partial class TaskStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskStatusID;
		
		private string _TaskStatusName;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskStatusIDChanging(int value);
    partial void OnTaskStatusIDChanged();
    partial void OnTaskStatusNameChanging(string value);
    partial void OnTaskStatusNameChanged();
    #endregion
		
		public TaskStatus()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskStatusID
		{
			get
			{
				return this._TaskStatusID;
			}
			set
			{
				if ((this._TaskStatusID != value))
				{
					this.OnTaskStatusIDChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusID = value;
					this.SendPropertyChanged("TaskStatusID");
					this.OnTaskStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusName", DbType="NVarChar(50)")]
		public string TaskStatusName
		{
			get
			{
				return this._TaskStatusName;
			}
			set
			{
				if ((this._TaskStatusName != value))
				{
					this.OnTaskStatusNameChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusName = value;
					this.SendPropertyChanged("TaskStatusName");
					this.OnTaskStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskStatus_Task", Storage="_Tasks", ThisKey="TaskStatusID", OtherKey="TaskStatus")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus1 = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskType")]
	public partial class TaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskTypeID;
		
		private string _TaskTypeName;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskTypeIDChanging(int value);
    partial void OnTaskTypeIDChanged();
    partial void OnTaskTypeNameChanging(string value);
    partial void OnTaskTypeNameChanged();
    #endregion
		
		public TaskType()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskTypeID
		{
			get
			{
				return this._TaskTypeID;
			}
			set
			{
				if ((this._TaskTypeID != value))
				{
					this.OnTaskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeID = value;
					this.SendPropertyChanged("TaskTypeID");
					this.OnTaskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeName", DbType="NVarChar(50)")]
		public string TaskTypeName
		{
			get
			{
				return this._TaskTypeName;
			}
			set
			{
				if ((this._TaskTypeName != value))
				{
					this.OnTaskTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeName = value;
					this.SendPropertyChanged("TaskTypeName");
					this.OnTaskTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_Tasks", ThisKey="TaskTypeID", OtherKey="TaskTypeId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Temp")]
	public partial class Temp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TempID;
		
		private string _TempName;
		
		private string _TemoValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTempIDChanging(int value);
    partial void OnTempIDChanged();
    partial void OnTempNameChanging(string value);
    partial void OnTempNameChanged();
    partial void OnTemoValueChanging(string value);
    partial void OnTemoValueChanged();
    #endregion
		
		public Temp()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TempID
		{
			get
			{
				return this._TempID;
			}
			set
			{
				if ((this._TempID != value))
				{
					this.OnTempIDChanging(value);
					this.SendPropertyChanging();
					this._TempID = value;
					this.SendPropertyChanged("TempID");
					this.OnTempIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempName", DbType="NVarChar(MAX)")]
		public string TempName
		{
			get
			{
				return this._TempName;
			}
			set
			{
				if ((this._TempName != value))
				{
					this.OnTempNameChanging(value);
					this.SendPropertyChanging();
					this._TempName = value;
					this.SendPropertyChanged("TempName");
					this.OnTempNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemoValue", DbType="NVarChar(MAX)")]
		public string TemoValue
		{
			get
			{
				return this._TemoValue;
			}
			set
			{
				if ((this._TemoValue != value))
				{
					this.OnTemoValueChanging(value);
					this.SendPropertyChanging();
					this._TemoValue = value;
					this.SendPropertyChanged("TemoValue");
					this.OnTemoValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporalTestsAccounts")]
	public partial class TemporalTestsAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RequestID;
		
		private string _Password;
		
		private bool _IsEnabled;
		
		private EntityRef<SessionRequest> _SessionRequest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    #endregion
		
		public TemporalTestsAccount()
		{
			this._SessionRequest = default(EntityRef<SessionRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="Int NOT NULL")]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._SessionRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionRequest_TemporalTestsAccount", Storage="_SessionRequest", ThisKey="RequestID", OtherKey="RequestId", IsForeignKey=true)]
		public SessionRequest SessionRequest
		{
			get
			{
				return this._SessionRequest.Entity;
			}
			set
			{
				SessionRequest previousValue = this._SessionRequest.Entity;
				if (((previousValue != value) 
							|| (this._SessionRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionRequest.Entity = null;
						previousValue.TemporalTestsAccounts.Remove(this);
					}
					this._SessionRequest.Entity = value;
					if ((value != null))
					{
						value.TemporalTestsAccounts.Add(this);
						this._RequestID = value.RequestId;
					}
					else
					{
						this._RequestID = default(int);
					}
					this.SendPropertyChanged("SessionRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSuiteResult")]
	public partial class TestSuiteResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DateTime;
		
		private string _Bandwidth;
		
		private string _Browser;
		
		private string _Codec;
		
		private string _Suggestion;
		
		private int _TestAccountID;
		
		private string _HasVideo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnBandwidthChanging(string value);
    partial void OnBandwidthChanged();
    partial void OnBrowserChanging(string value);
    partial void OnBrowserChanged();
    partial void OnCodecChanging(string value);
    partial void OnCodecChanged();
    partial void OnSuggestionChanging(string value);
    partial void OnSuggestionChanged();
    partial void OnTestAccountIDChanging(int value);
    partial void OnTestAccountIDChanged();
    partial void OnHasVideoChanging(string value);
    partial void OnHasVideoChanged();
    #endregion
		
		public TestSuiteResult()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bandwidth", DbType="NVarChar(50)")]
		public string Bandwidth
		{
			get
			{
				return this._Bandwidth;
			}
			set
			{
				if ((this._Bandwidth != value))
				{
					this.OnBandwidthChanging(value);
					this.SendPropertyChanging();
					this._Bandwidth = value;
					this.SendPropertyChanged("Bandwidth");
					this.OnBandwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Browser", DbType="NVarChar(50)")]
		public string Browser
		{
			get
			{
				return this._Browser;
			}
			set
			{
				if ((this._Browser != value))
				{
					this.OnBrowserChanging(value);
					this.SendPropertyChanging();
					this._Browser = value;
					this.SendPropertyChanged("Browser");
					this.OnBrowserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codec", DbType="NVarChar(50)")]
		public string Codec
		{
			get
			{
				return this._Codec;
			}
			set
			{
				if ((this._Codec != value))
				{
					this.OnCodecChanging(value);
					this.SendPropertyChanging();
					this._Codec = value;
					this.SendPropertyChanged("Codec");
					this.OnCodecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suggestion", DbType="NVarChar(50)")]
		public string Suggestion
		{
			get
			{
				return this._Suggestion;
			}
			set
			{
				if ((this._Suggestion != value))
				{
					this.OnSuggestionChanging(value);
					this.SendPropertyChanging();
					this._Suggestion = value;
					this.SendPropertyChanged("Suggestion");
					this.OnSuggestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestAccountID", DbType="Int NOT NULL")]
		public int TestAccountID
		{
			get
			{
				return this._TestAccountID;
			}
			set
			{
				if ((this._TestAccountID != value))
				{
					this.OnTestAccountIDChanging(value);
					this.SendPropertyChanging();
					this._TestAccountID = value;
					this.SendPropertyChanged("TestAccountID");
					this.OnTestAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasVideo", DbType="NVarChar(50)")]
		public string HasVideo
		{
			get
			{
				return this._HasVideo;
			}
			set
			{
				if ((this._HasVideo != value))
				{
					this.OnHasVideoChanging(value);
					this.SendPropertyChanging();
					this._HasVideo = value;
					this.SendPropertyChanged("HasVideo");
					this.OnHasVideoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInPlan")]
	public partial class UserInPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private int _PlanID;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<PeymentPlan> _PeymentPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    #endregion
		
		public UserInPlan()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._PeymentPlan = default(EntityRef<PeymentPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", DbType="Int NOT NULL")]
		public int PlanID
		{
			get
			{
				return this._PlanID;
			}
			set
			{
				if ((this._PlanID != value))
				{
					if (this._PeymentPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIDChanging(value);
					this.SendPropertyChanging();
					this._PlanID = value;
					this.SendPropertyChanged("PlanID");
					this.OnPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInPlan", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserInPlans.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserInPlans.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PeymentPlan_UserInPlan", Storage="_PeymentPlan", ThisKey="PlanID", OtherKey="ID", IsForeignKey=true)]
		public PeymentPlan PeymentPlan
		{
			get
			{
				return this._PeymentPlan.Entity;
			}
			set
			{
				PeymentPlan previousValue = this._PeymentPlan.Entity;
				if (((previousValue != value) 
							|| (this._PeymentPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PeymentPlan.Entity = null;
						previousValue.UserInPlans.Remove(this);
					}
					this._PeymentPlan.Entity = value;
					if ((value != null))
					{
						value.UserInPlans.Add(this);
						this._PlanID = value.ID;
					}
					else
					{
						this._PlanID = default(int);
					}
					this.SendPropertyChanged("PeymentPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInService")]
	public partial class UserInService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserServiceId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<int> _SessionServiceId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<SessionService> _SessionService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserServiceIdChanging(int value);
    partial void OnUserServiceIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnSessionServiceIdChanging(System.Nullable<int> value);
    partial void OnSessionServiceIdChanged();
    #endregion
		
		public UserInService()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._SessionService = default(EntityRef<SessionService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserServiceId
		{
			get
			{
				return this._UserServiceId;
			}
			set
			{
				if ((this._UserServiceId != value))
				{
					this.OnUserServiceIdChanging(value);
					this.SendPropertyChanging();
					this._UserServiceId = value;
					this.SendPropertyChanged("UserServiceId");
					this.OnUserServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionServiceId", DbType="Int")]
		public System.Nullable<int> SessionServiceId
		{
			get
			{
				return this._SessionServiceId;
			}
			set
			{
				if ((this._SessionServiceId != value))
				{
					if (this._SessionService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionServiceIdChanging(value);
					this.SendPropertyChanging();
					this._SessionServiceId = value;
					this.SendPropertyChanged("SessionServiceId");
					this.OnSessionServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInService", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserInServices.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserInServices.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionService_UserInService", Storage="_SessionService", ThisKey="SessionServiceId", OtherKey="SessionServicesId", IsForeignKey=true, DeleteRule="CASCADE")]
		public SessionService SessionService
		{
			get
			{
				return this._SessionService.Entity;
			}
			set
			{
				SessionService previousValue = this._SessionService.Entity;
				if (((previousValue != value) 
							|| (this._SessionService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionService.Entity = null;
						previousValue.UserInServices.Remove(this);
					}
					this._SessionService.Entity = value;
					if ((value != null))
					{
						value.UserInServices.Add(this);
						this._SessionServiceId = value.SessionServicesId;
					}
					else
					{
						this._SessionServiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SessionService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInSession")]
	public partial class UserInSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private int _SessionId;
		
		private System.Nullable<System.DateTime> _EntranceTime;
		
		private System.Nullable<System.DateTime> _ExitTime;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnEntranceTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEntranceTimeChanged();
    partial void OnExitTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExitTimeChanged();
    #endregion
		
		public UserInSession()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntranceTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntranceTime
		{
			get
			{
				return this._EntranceTime;
			}
			set
			{
				if ((this._EntranceTime != value))
				{
					this.OnEntranceTimeChanging(value);
					this.SendPropertyChanging();
					this._EntranceTime = value;
					this.SendPropertyChanged("EntranceTime");
					this.OnEntranceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExitTime
		{
			get
			{
				return this._ExitTime;
			}
			set
			{
				if ((this._ExitTime != value))
				{
					this.OnExitTimeChanging(value);
					this.SendPropertyChanging();
					this._ExitTime = value;
					this.SendPropertyChanged("ExitTime");
					this.OnExitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserInSession", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserInSessions.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserInSessions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_UserInSession", Storage="_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.UserInSessions.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.UserInSessions.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebinarDateTime")]
	public partial class WebinarDateTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _Day;
		
		private System.Nullable<System.TimeSpan> _Time;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Profile> _Profiles;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Session> _Sessions1;
		
		private EntitySet<SessionInvite> _SessionInvites;
		
		private EntitySet<SessionRequest> _SessionRequests;
		
		private EntitySet<SessionRequest> _SessionRequests1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnDayChanging(System.Nullable<int> value);
    partial void OnDayChanged();
    partial void OnTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeChanged();
    #endregion
		
		public WebinarDateTime()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Sessions1 = new EntitySet<Session>(new Action<Session>(this.attach_Sessions1), new Action<Session>(this.detach_Sessions1));
			this._SessionInvites = new EntitySet<SessionInvite>(new Action<SessionInvite>(this.attach_SessionInvites), new Action<SessionInvite>(this.detach_SessionInvites));
			this._SessionRequests = new EntitySet<SessionRequest>(new Action<SessionRequest>(this.attach_SessionRequests), new Action<SessionRequest>(this.detach_SessionRequests));
			this._SessionRequests1 = new EntitySet<SessionRequest>(new Action<SessionRequest>(this.attach_SessionRequests1), new Action<SessionRequest>(this.detach_SessionRequests1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int")]
		public System.Nullable<int> Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Message", Storage="_Messages", ThisKey="id", OtherKey="Date")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Profile", Storage="_Profiles", ThisKey="id", OtherKey="Birthday")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session", Storage="_Sessions", ThisKey="id", OtherKey="BeginTime")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session1", Storage="_Sessions1", ThisKey="id", OtherKey="EndTime")]
		public EntitySet<Session> Sessions1
		{
			get
			{
				return this._Sessions1;
			}
			set
			{
				this._Sessions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionInvite", Storage="_SessionInvites", ThisKey="id", OtherKey="InviteDate")]
		public EntitySet<SessionInvite> SessionInvites
		{
			get
			{
				return this._SessionInvites;
			}
			set
			{
				this._SessionInvites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionRequest", Storage="_SessionRequests", ThisKey="id", OtherKey="RequestDate")]
		public EntitySet<SessionRequest> SessionRequests
		{
			get
			{
				return this._SessionRequests;
			}
			set
			{
				this._SessionRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_SessionRequest1", Storage="_SessionRequests1", ThisKey="id", OtherKey="ResultDate")]
		public EntitySet<SessionRequest> SessionRequests1
		{
			get
			{
				return this._SessionRequests1;
			}
			set
			{
				this._SessionRequests1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = this;
		}
		
		private void detach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = null;
		}
		
		private void attach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_SessionInvites(SessionInvite entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_SessionRequests(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_SessionRequests1(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = this;
		}
		
		private void detach_SessionRequests1(SessionRequest entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = null;
		}
	}
}
#pragma warning restore 1591
