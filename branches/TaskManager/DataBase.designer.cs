#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskManagerEngine
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Namaava")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskType(TaskType instance);
    partial void UpdateTaskType(TaskType instance);
    partial void DeleteTaskType(TaskType instance);
    partial void InsertTaskParam(TaskParam instance);
    partial void UpdateTaskParam(TaskParam instance);
    partial void DeleteTaskParam(TaskParam instance);
    partial void InsertTaskStatus(TaskStatus instance);
    partial void UpdateTaskStatus(TaskStatus instance);
    partial void DeleteTaskStatus(TaskStatus instance);
    partial void InsertApplicationSetting(ApplicationSetting instance);
    partial void UpdateApplicationSetting(ApplicationSetting instance);
    partial void DeleteApplicationSetting(ApplicationSetting instance);
    partial void InsertSettingsProperty(SettingsProperty instance);
    partial void UpdateSettingsProperty(SettingsProperty instance);
    partial void DeleteSettingsProperty(SettingsProperty instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertWebinarDateTime(WebinarDateTime instance);
    partial void UpdateWebinarDateTime(WebinarDateTime instance);
    partial void DeleteWebinarDateTime(WebinarDateTime instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::TaskManagerEngine.Properties.Settings.Default.sampleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskType> TaskTypes
		{
			get
			{
				return this.GetTable<TaskType>();
			}
		}
		
		public System.Data.Linq.Table<TaskParam> TaskParams
		{
			get
			{
				return this.GetTable<TaskParam>();
			}
		}
		
		public System.Data.Linq.Table<TaskStatus> TaskStatus
		{
			get
			{
				return this.GetTable<TaskStatus>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationSetting> ApplicationSettings
		{
			get
			{
				return this.GetTable<ApplicationSetting>();
			}
		}
		
		public System.Data.Linq.Table<SettingsProperty> SettingsProperties
		{
			get
			{
				return this.GetTable<SettingsProperty>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<WebinarDateTime> WebinarDateTimes
		{
			get
			{
				return this.GetTable<WebinarDateTime>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private int _TaskTypeId;
		
		private int _TaskStatus;
		
		private System.DateTime _TaskInitDate;
		
		private System.Nullable<int> _TaskPriority;
		
		private System.Nullable<System.DateTime> _TaskRunTime;
		
		private EntitySet<TaskParam> _TaskParams;
		
		private EntityRef<TaskType> _TaskType;
		
		private EntityRef<TaskStatus> _TaskStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnTaskTypeIdChanging(int value);
    partial void OnTaskTypeIdChanged();
    partial void OnTaskStatusChanging(int value);
    partial void OnTaskStatusChanged();
    partial void OnTaskInitDateChanging(System.DateTime value);
    partial void OnTaskInitDateChanged();
    partial void OnTaskPriorityChanging(System.Nullable<int> value);
    partial void OnTaskPriorityChanged();
    partial void OnTaskRunTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTaskRunTimeChanged();
    #endregion
		
		public Task()
		{
			this._TaskParams = new EntitySet<TaskParam>(new Action<TaskParam>(this.attach_TaskParams), new Action<TaskParam>(this.detach_TaskParams));
			this._TaskType = default(EntityRef<TaskType>);
			this._TaskStatus1 = default(EntityRef<TaskStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeId", DbType="Int NOT NULL")]
		public int TaskTypeId
		{
			get
			{
				return this._TaskTypeId;
			}
			set
			{
				if ((this._TaskTypeId != value))
				{
					if (this._TaskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeId = value;
					this.SendPropertyChanged("TaskTypeId");
					this.OnTaskTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatus", DbType="Int NOT NULL")]
		public int TaskStatus
		{
			get
			{
				return this._TaskStatus;
			}
			set
			{
				if ((this._TaskStatus != value))
				{
					if (this._TaskStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskStatusChanging(value);
					this.SendPropertyChanging();
					this._TaskStatus = value;
					this.SendPropertyChanged("TaskStatus");
					this.OnTaskStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskInitDate", DbType="DateTime NOT NULL")]
		public System.DateTime TaskInitDate
		{
			get
			{
				return this._TaskInitDate;
			}
			set
			{
				if ((this._TaskInitDate != value))
				{
					this.OnTaskInitDateChanging(value);
					this.SendPropertyChanging();
					this._TaskInitDate = value;
					this.SendPropertyChanged("TaskInitDate");
					this.OnTaskInitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskPriority", DbType="Int")]
		public System.Nullable<int> TaskPriority
		{
			get
			{
				return this._TaskPriority;
			}
			set
			{
				if ((this._TaskPriority != value))
				{
					this.OnTaskPriorityChanging(value);
					this.SendPropertyChanging();
					this._TaskPriority = value;
					this.SendPropertyChanged("TaskPriority");
					this.OnTaskPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskRunTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TaskRunTime
		{
			get
			{
				return this._TaskRunTime;
			}
			set
			{
				if ((this._TaskRunTime != value))
				{
					this.OnTaskRunTimeChanging(value);
					this.SendPropertyChanging();
					this._TaskRunTime = value;
					this.SendPropertyChanged("TaskRunTime");
					this.OnTaskRunTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskParam", Storage="_TaskParams", ThisKey="TaskId", OtherKey="TaskID")]
		public EntitySet<TaskParam> TaskParams
		{
			get
			{
				return this._TaskParams;
			}
			set
			{
				this._TaskParams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_TaskType", ThisKey="TaskTypeId", OtherKey="TaskTypeID", IsForeignKey=true)]
		public TaskType TaskType
		{
			get
			{
				return this._TaskType.Entity;
			}
			set
			{
				TaskType previousValue = this._TaskType.Entity;
				if (((previousValue != value) 
							|| (this._TaskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskType.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskType.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskTypeId = value.TaskTypeID;
					}
					else
					{
						this._TaskTypeId = default(int);
					}
					this.SendPropertyChanged("TaskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskStatus_Task", Storage="_TaskStatus1", ThisKey="TaskStatus", OtherKey="TaskStatusID", IsForeignKey=true)]
		public TaskStatus TaskStatus1
		{
			get
			{
				return this._TaskStatus1.Entity;
			}
			set
			{
				TaskStatus previousValue = this._TaskStatus1.Entity;
				if (((previousValue != value) 
							|| (this._TaskStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskStatus1.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskStatus1.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskStatus = value.TaskStatusID;
					}
					else
					{
						this._TaskStatus = default(int);
					}
					this.SendPropertyChanged("TaskStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskParams(TaskParam entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskParams(TaskParam entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskType")]
	public partial class TaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskTypeID;
		
		private string _TaskTypeName;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskTypeIDChanging(int value);
    partial void OnTaskTypeIDChanged();
    partial void OnTaskTypeNameChanging(string value);
    partial void OnTaskTypeNameChanged();
    #endregion
		
		public TaskType()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskTypeID
		{
			get
			{
				return this._TaskTypeID;
			}
			set
			{
				if ((this._TaskTypeID != value))
				{
					this.OnTaskTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeID = value;
					this.SendPropertyChanged("TaskTypeID");
					this.OnTaskTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeName", DbType="NVarChar(50)")]
		public string TaskTypeName
		{
			get
			{
				return this._TaskTypeName;
			}
			set
			{
				if ((this._TaskTypeName != value))
				{
					this.OnTaskTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeName = value;
					this.SendPropertyChanged("TaskTypeName");
					this.OnTaskTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_Tasks", ThisKey="TaskTypeID", OtherKey="TaskTypeId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskParams")]
	public partial class TaskParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskParamID;
		
		private string _TaskParamName;
		
		private string _TaskParamValue;
		
		private int _TaskID;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskParamIDChanging(int value);
    partial void OnTaskParamIDChanged();
    partial void OnTaskParamNameChanging(string value);
    partial void OnTaskParamNameChanged();
    partial void OnTaskParamValueChanging(string value);
    partial void OnTaskParamValueChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TaskParam()
		{
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskParamID
		{
			get
			{
				return this._TaskParamID;
			}
			set
			{
				if ((this._TaskParamID != value))
				{
					this.OnTaskParamIDChanging(value);
					this.SendPropertyChanging();
					this._TaskParamID = value;
					this.SendPropertyChanged("TaskParamID");
					this.OnTaskParamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskParamName
		{
			get
			{
				return this._TaskParamName;
			}
			set
			{
				if ((this._TaskParamName != value))
				{
					this.OnTaskParamNameChanging(value);
					this.SendPropertyChanging();
					this._TaskParamName = value;
					this.SendPropertyChanged("TaskParamName");
					this.OnTaskParamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskParamValue", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TaskParamValue
		{
			get
			{
				return this._TaskParamValue;
			}
			set
			{
				if ((this._TaskParamValue != value))
				{
					this.OnTaskParamValueChanging(value);
					this.SendPropertyChanging();
					this._TaskParamValue = value;
					this.SendPropertyChanged("TaskParamValue");
					this.OnTaskParamValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskParam", Storage="_Task", ThisKey="TaskID", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskParams.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskParams.Add(this);
						this._TaskID = value.TaskId;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskStatus")]
	public partial class TaskStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskStatusID;
		
		private string _TaskStatusName;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskStatusIDChanging(int value);
    partial void OnTaskStatusIDChanged();
    partial void OnTaskStatusNameChanging(string value);
    partial void OnTaskStatusNameChanged();
    #endregion
		
		public TaskStatus()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskStatusID
		{
			get
			{
				return this._TaskStatusID;
			}
			set
			{
				if ((this._TaskStatusID != value))
				{
					this.OnTaskStatusIDChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusID = value;
					this.SendPropertyChanged("TaskStatusID");
					this.OnTaskStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskStatusName", DbType="NVarChar(50)")]
		public string TaskStatusName
		{
			get
			{
				return this._TaskStatusName;
			}
			set
			{
				if ((this._TaskStatusName != value))
				{
					this.OnTaskStatusNameChanging(value);
					this.SendPropertyChanging();
					this._TaskStatusName = value;
					this.SendPropertyChanged("TaskStatusName");
					this.OnTaskStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskStatus_Task", Storage="_Tasks", ThisKey="TaskStatusID", OtherKey="TaskStatus")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus1 = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationSettings")]
	public partial class ApplicationSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SettingName;
		
		private int _SettingsId;
		
		private EntitySet<SettingsProperty> _SettingsProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingsIdChanging(int value);
    partial void OnSettingsIdChanged();
    #endregion
		
		public ApplicationSetting()
		{
			this._SettingsProperties = new EntitySet<SettingsProperty>(new Action<SettingsProperty>(this.attach_SettingsProperties), new Action<SettingsProperty>(this.detach_SettingsProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					this.OnSettingsIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsId = value;
					this.SendPropertyChanged("SettingsId");
					this.OnSettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationSetting_SettingsProperty", Storage="_SettingsProperties", ThisKey="SettingsId", OtherKey="SettingsId")]
		public EntitySet<SettingsProperty> SettingsProperties
		{
			get
			{
				return this._SettingsProperties;
			}
			set
			{
				this._SettingsProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SettingsProperties(SettingsProperty entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationSetting = this;
		}
		
		private void detach_SettingsProperties(SettingsProperty entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationSetting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SettingsProperty")]
	public partial class SettingsProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PropertyName;
		
		private string _PropertyValue;
		
		private int _SettingsId;
		
		private int _propertyId;
		
		private EntityRef<ApplicationSetting> _ApplicationSetting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyValueChanging(string value);
    partial void OnPropertyValueChanged();
    partial void OnSettingsIdChanging(int value);
    partial void OnSettingsIdChanged();
    partial void OnpropertyIdChanging(int value);
    partial void OnpropertyIdChanged();
    #endregion
		
		public SettingsProperty()
		{
			this._ApplicationSetting = default(EntityRef<ApplicationSetting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="NVarChar(50)")]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValue", DbType="NVarChar(50)")]
		public string PropertyValue
		{
			get
			{
				return this._PropertyValue;
			}
			set
			{
				if ((this._PropertyValue != value))
				{
					this.OnPropertyValueChanging(value);
					this.SendPropertyChanging();
					this._PropertyValue = value;
					this.SendPropertyChanged("PropertyValue");
					this.OnPropertyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsId", DbType="Int NOT NULL")]
		public int SettingsId
		{
			get
			{
				return this._SettingsId;
			}
			set
			{
				if ((this._SettingsId != value))
				{
					if (this._ApplicationSetting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingsIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsId = value;
					this.SendPropertyChanged("SettingsId");
					this.OnSettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int propertyId
		{
			get
			{
				return this._propertyId;
			}
			set
			{
				if ((this._propertyId != value))
				{
					this.OnpropertyIdChanging(value);
					this.SendPropertyChanging();
					this._propertyId = value;
					this.SendPropertyChanged("propertyId");
					this.OnpropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationSetting_SettingsProperty", Storage="_ApplicationSetting", ThisKey="SettingsId", OtherKey="SettingsId", IsForeignKey=true)]
		public ApplicationSetting ApplicationSetting
		{
			get
			{
				return this._ApplicationSetting.Entity;
			}
			set
			{
				ApplicationSetting previousValue = this._ApplicationSetting.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationSetting.Entity = null;
						previousValue.SettingsProperties.Remove(this);
					}
					this._ApplicationSetting.Entity = value;
					if ((value != null))
					{
						value.SettingsProperties.Add(this);
						this._SettingsId = value.SettingsId;
					}
					else
					{
						this._SettingsId = default(int);
					}
					this.SendPropertyChanged("ApplicationSetting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionId;
		
		private System.Guid _PresentorId;
		
		private string _SessionName;
		
		private int _SessionType;
		
		private string _MasterKey;
		
		private System.Nullable<int> _BeginTime;
		
		private System.Nullable<int> _EndTime;
		
		private System.Nullable<int> _Capacity;
		
		private string _Fee;
		
		private string _Wallpaper;
		
		private string _Keywords;
		
		private string _Description;
		
		private System.Guid _SessionAdmin;
		
		private System.Nullable<int> _ReminderHourBefore;
		
		private System.Nullable<int> _StateId;
		
		private System.Nullable<bool> _SMSSend;
		
		private System.Nullable<int> _PrimaryContentID;
		
		private string _FeeForEach;
		
		private string _Why;
		
		private string _Level;
		
		private string _Learner;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime;
		
		private EntityRef<WebinarDateTime> _WebinarDateTime1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnPresentorIdChanging(System.Guid value);
    partial void OnPresentorIdChanged();
    partial void OnSessionNameChanging(string value);
    partial void OnSessionNameChanged();
    partial void OnSessionTypeChanging(int value);
    partial void OnSessionTypeChanged();
    partial void OnMasterKeyChanging(string value);
    partial void OnMasterKeyChanged();
    partial void OnBeginTimeChanging(System.Nullable<int> value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<int> value);
    partial void OnEndTimeChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnFeeChanging(string value);
    partial void OnFeeChanged();
    partial void OnWallpaperChanging(string value);
    partial void OnWallpaperChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSessionAdminChanging(System.Guid value);
    partial void OnSessionAdminChanged();
    partial void OnReminderHourBeforeChanging(System.Nullable<int> value);
    partial void OnReminderHourBeforeChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnSMSSendChanging(System.Nullable<bool> value);
    partial void OnSMSSendChanged();
    partial void OnPrimaryContentIDChanging(System.Nullable<int> value);
    partial void OnPrimaryContentIDChanged();
    partial void OnFeeForEachChanging(string value);
    partial void OnFeeForEachChanged();
    partial void OnWhyChanging(string value);
    partial void OnWhyChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnLearnerChanging(string value);
    partial void OnLearnerChanged();
    #endregion
		
		public Session()
		{
			this._WebinarDateTime = default(EntityRef<WebinarDateTime>);
			this._WebinarDateTime1 = default(EntityRef<WebinarDateTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PresentorId
		{
			get
			{
				return this._PresentorId;
			}
			set
			{
				if ((this._PresentorId != value))
				{
					this.OnPresentorIdChanging(value);
					this.SendPropertyChanging();
					this._PresentorId = value;
					this.SendPropertyChanged("PresentorId");
					this.OnPresentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionName", DbType="NVarChar(MAX)")]
		public string SessionName
		{
			get
			{
				return this._SessionName;
			}
			set
			{
				if ((this._SessionName != value))
				{
					this.OnSessionNameChanging(value);
					this.SendPropertyChanging();
					this._SessionName = value;
					this.SendPropertyChanged("SessionName");
					this.OnSessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionType", DbType="Int NOT NULL")]
		public int SessionType
		{
			get
			{
				return this._SessionType;
			}
			set
			{
				if ((this._SessionType != value))
				{
					this.OnSessionTypeChanging(value);
					this.SendPropertyChanging();
					this._SessionType = value;
					this.SendPropertyChanged("SessionType");
					this.OnSessionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterKey", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string MasterKey
		{
			get
			{
				return this._MasterKey;
			}
			set
			{
				if ((this._MasterKey != value))
				{
					this.OnMasterKeyChanging(value);
					this.SendPropertyChanging();
					this._MasterKey = value;
					this.SendPropertyChanged("MasterKey");
					this.OnMasterKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="Int")]
		public System.Nullable<int> BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					if (this._WebinarDateTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int")]
		public System.Nullable<int> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					if (this._WebinarDateTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="NVarChar(50)")]
		public string Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wallpaper", DbType="NVarChar(MAX)")]
		public string Wallpaper
		{
			get
			{
				return this._Wallpaper;
			}
			set
			{
				if ((this._Wallpaper != value))
				{
					this.OnWallpaperChanging(value);
					this.SendPropertyChanging();
					this._Wallpaper = value;
					this.SendPropertyChanged("Wallpaper");
					this.OnWallpaperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionAdmin", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SessionAdmin
		{
			get
			{
				return this._SessionAdmin;
			}
			set
			{
				if ((this._SessionAdmin != value))
				{
					this.OnSessionAdminChanging(value);
					this.SendPropertyChanging();
					this._SessionAdmin = value;
					this.SendPropertyChanged("SessionAdmin");
					this.OnSessionAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReminderHourBefore", DbType="Int")]
		public System.Nullable<int> ReminderHourBefore
		{
			get
			{
				return this._ReminderHourBefore;
			}
			set
			{
				if ((this._ReminderHourBefore != value))
				{
					this.OnReminderHourBeforeChanging(value);
					this.SendPropertyChanging();
					this._ReminderHourBefore = value;
					this.SendPropertyChanged("ReminderHourBefore");
					this.OnReminderHourBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSSend", DbType="Bit")]
		public System.Nullable<bool> SMSSend
		{
			get
			{
				return this._SMSSend;
			}
			set
			{
				if ((this._SMSSend != value))
				{
					this.OnSMSSendChanging(value);
					this.SendPropertyChanging();
					this._SMSSend = value;
					this.SendPropertyChanged("SMSSend");
					this.OnSMSSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryContentID", DbType="Int")]
		public System.Nullable<int> PrimaryContentID
		{
			get
			{
				return this._PrimaryContentID;
			}
			set
			{
				if ((this._PrimaryContentID != value))
				{
					this.OnPrimaryContentIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContentID = value;
					this.SendPropertyChanged("PrimaryContentID");
					this.OnPrimaryContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeForEach", DbType="NVarChar(50)")]
		public string FeeForEach
		{
			get
			{
				return this._FeeForEach;
			}
			set
			{
				if ((this._FeeForEach != value))
				{
					this.OnFeeForEachChanging(value);
					this.SendPropertyChanging();
					this._FeeForEach = value;
					this.SendPropertyChanged("FeeForEach");
					this.OnFeeForEachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Why", DbType="NVarChar(MAX)")]
		public string Why
		{
			get
			{
				return this._Why;
			}
			set
			{
				if ((this._Why != value))
				{
					this.OnWhyChanging(value);
					this.SendPropertyChanging();
					this._Why = value;
					this.SendPropertyChanged("Why");
					this.OnWhyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="NVarChar(MAX)")]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Learner", DbType="NVarChar(MAX)")]
		public string Learner
		{
			get
			{
				return this._Learner;
			}
			set
			{
				if ((this._Learner != value))
				{
					this.OnLearnerChanging(value);
					this.SendPropertyChanging();
					this._Learner = value;
					this.SendPropertyChanged("Learner");
					this.OnLearnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session", Storage="_WebinarDateTime", ThisKey="BeginTime", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime
		{
			get
			{
				return this._WebinarDateTime.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._WebinarDateTime.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._BeginTime = value.id;
					}
					else
					{
						this._BeginTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session1", Storage="_WebinarDateTime1", ThisKey="EndTime", OtherKey="id", IsForeignKey=true)]
		public WebinarDateTime WebinarDateTime1
		{
			get
			{
				return this._WebinarDateTime1.Entity;
			}
			set
			{
				WebinarDateTime previousValue = this._WebinarDateTime1.Entity;
				if (((previousValue != value) 
							|| (this._WebinarDateTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebinarDateTime1.Entity = null;
						previousValue.Sessions1.Remove(this);
					}
					this._WebinarDateTime1.Entity = value;
					if ((value != null))
					{
						value.Sessions1.Add(this);
						this._EndTime = value.id;
					}
					else
					{
						this._EndTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebinarDateTime1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebinarDateTime")]
	public partial class WebinarDateTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _Day;
		
		private System.Nullable<System.TimeSpan> _Time;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Session> _Sessions1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnDayChanging(System.Nullable<int> value);
    partial void OnDayChanged();
    partial void OnTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeChanged();
    #endregion
		
		public WebinarDateTime()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Sessions1 = new EntitySet<Session>(new Action<Session>(this.attach_Sessions1), new Action<Session>(this.detach_Sessions1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int")]
		public System.Nullable<int> Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session", Storage="_Sessions", ThisKey="id", OtherKey="BeginTime")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebinarDateTime_Session1", Storage="_Sessions1", ThisKey="id", OtherKey="EndTime")]
		public EntitySet<Session> Sessions1
		{
			get
			{
				return this._Sessions1;
			}
			set
			{
				this._Sessions1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime = null;
		}
		
		private void attach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = this;
		}
		
		private void detach_Sessions1(Session entity)
		{
			this.SendPropertyChanging();
			entity.WebinarDateTime1 = null;
		}
	}
}
#pragma warning restore 1591
